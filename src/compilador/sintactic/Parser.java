
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compilador.sintactic;

import java_cup.runtime.*;
import compilador.sintactic.symbols.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\111\000\002\002\004\000\002\002\012\000\002\016" +
    "\004\000\002\016\020\000\002\016\020\000\002\016\016" +
    "\000\002\016\004\000\002\024\002\000\002\025\002\000" +
    "\002\003\003\000\002\003\005\000\002\003\002\000\002" +
    "\004\011\000\002\004\003\000\002\004\003\000\002\004" +
    "\005\000\002\004\003\000\002\004\013\000\002\004\003" +
    "\000\002\004\003\000\002\004\004\000\002\004\011\000" +
    "\002\004\006\000\002\020\013\000\002\020\013\000\002" +
    "\022\005\000\002\022\004\000\002\022\006\000\002\022" +
    "\003\000\002\023\003\000\002\023\003\000\002\017\004" +
    "\000\002\014\006\000\002\015\004\000\002\015\006\000" +
    "\002\015\005\000\002\015\006\000\002\015\005\000\002" +
    "\015\005\000\002\015\003\000\002\005\013\000\002\005" +
    "\013\000\002\011\005\000\002\011\003\000\002\011\002" +
    "\000\002\012\012\000\002\006\005\000\002\006\005\000" +
    "\002\006\006\000\002\006\005\000\002\006\005\000\002" +
    "\006\002\000\002\010\011\000\002\010\011\000\002\010" +
    "\011\000\002\010\011\000\002\010\011\000\002\007\003" +
    "\000\002\007\007\000\002\007\007\000\002\007\005\000" +
    "\002\007\003\000\002\007\007\000\002\013\007\000\002" +
    "\013\005\000\002\013\006\000\002\013\006\000\002\013" +
    "\007\000\002\013\006\000\002\013\006\000\002\021\005" +
    "\000\002\021\005\000\002\021\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\352\000\004\026\005\001\002\000\004\002\354\001" +
    "\002\000\004\007\006\001\002\000\004\010\007\001\002" +
    "\000\004\014\010\001\002\000\004\025\011\001\002\000" +
    "\030\004\025\015\015\016\023\025\ufff6\033\016\035\013" +
    "\036\032\040\017\042\014\050\024\051\026\001\002\000" +
    "\004\025\uffef\001\002\000\004\051\345\001\002\000\004" +
    "\007\340\001\002\000\004\051\310\001\002\000\004\007" +
    "\264\001\002\000\004\032\263\001\002\000\006\025\ufff4" +
    "\031\255\001\002\000\004\025\173\001\002\000\004\025" +
    "\uffee\001\002\000\004\007\151\001\002\000\024\010\uffc8" +
    "\011\uffc8\012\uffc8\013\uffc8\025\uffc8\027\uffc8\030\uffc8\032" +
    "\uffc8\034\uffc8\001\002\000\004\007\117\001\002\000\010" +
    "\007\040\013\037\025\uffc4\001\002\000\004\025\ufff3\001" +
    "\002\000\004\025\ufff8\001\002\000\004\025\ufff1\001\002" +
    "\000\004\051\033\001\002\000\004\013\034\001\002\000" +
    "\004\052\035\001\002\000\004\032\036\001\002\000\036" +
    "\005\uffc3\006\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3\022" +
    "\uffc3\023\uffc3\024\uffc3\025\uffc3\027\uffc3\030\uffc3\032\uffc3" +
    "\034\uffc3\001\002\000\016\015\067\032\uffce\036\032\050" +
    "\063\051\062\052\066\001\002\000\012\010\042\015\044" +
    "\035\043\051\041\001\002\000\006\010\060\037\057\001" +
    "\002\000\006\014\uffda\032\uffda\001\002\000\004\051\053" +
    "\001\002\000\004\051\047\001\002\000\004\032\046\001" +
    "\002\000\004\025\uffe1\001\002\000\006\010\051\037\050" +
    "\001\002\000\012\010\042\015\044\035\043\051\041\001" +
    "\002\000\006\014\uffde\032\uffde\001\002\000\006\014\uffdf" +
    "\032\uffdf\001\002\000\006\010\055\037\054\001\002\000" +
    "\012\010\042\015\044\035\043\051\041\001\002\000\006" +
    "\014\uffdc\032\uffdc\001\002\000\006\014\uffdd\032\uffdd\001" +
    "\002\000\012\010\042\015\044\035\043\051\041\001\002" +
    "\000\006\014\uffe0\032\uffe0\001\002\000\006\014\uffdb\032" +
    "\uffdb\001\002\000\016\011\uffc4\012\uffc4\013\uffc4\027\uffc4" +
    "\030\uffc4\032\116\001\002\000\016\011\uffc8\012\uffc8\013" +
    "\uffc8\027\uffc8\030\uffc8\032\115\001\002\000\014\011\103" +
    "\012\105\013\101\027\104\030\102\001\002\000\004\032" +
    "\100\001\002\000\004\032\077\001\002\000\004\051\070" +
    "\001\002\000\006\013\071\032\072\001\002\000\006\050" +
    "\074\051\073\001\002\000\036\005\uffc5\006\uffc5\010\uffc5" +
    "\011\uffc5\012\uffc5\013\uffc5\022\uffc5\023\uffc5\024\uffc5\025" +
    "\uffc5\027\uffc5\030\uffc5\032\uffc5\034\uffc5\001\002\000\004" +
    "\032\076\001\002\000\004\032\075\001\002\000\036\005" +
    "\uffc7\006\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\022\uffc7" +
    "\023\uffc7\024\uffc7\025\uffc7\027\uffc7\030\uffc7\032\uffc7\034" +
    "\uffc7\001\002\000\036\005\uffc6\006\uffc6\010\uffc6\011\uffc6" +
    "\012\uffc6\013\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\027" +
    "\uffc6\030\uffc6\032\uffc6\034\uffc6\001\002\000\004\025\uffc0" +
    "\001\002\000\004\025\uffbf\001\002\000\004\013\113\001" +
    "\002\000\012\015\067\036\032\050\024\051\106\001\002" +
    "\000\012\015\067\036\032\050\024\051\106\001\002\000" +
    "\012\015\067\036\032\050\024\051\106\001\002\000\012" +
    "\015\067\036\032\050\024\051\106\001\002\000\022\010" +
    "\uffc4\011\uffc4\012\uffc4\013\uffc4\027\uffc4\030\uffc4\032\uffc4" +
    "\034\uffc4\001\002\000\006\010\uffd2\032\uffd2\001\002\000" +
    "\006\010\uffd0\032\uffd0\001\002\000\006\010\uffd3\032\uffd3" +
    "\001\002\000\006\010\uffcf\032\uffcf\001\002\000\012\015" +
    "\067\036\032\050\024\051\106\001\002\000\006\010\uffd1" +
    "\032\uffd1\001\002\000\004\025\uffbd\001\002\000\004\025" +
    "\uffbc\001\002\000\016\010\uffce\015\067\036\032\043\123" +
    "\050\024\051\120\001\002\000\022\010\uffe5\011\uffc4\012" +
    "\uffc4\013\uffc4\027\uffc4\030\uffc4\046\125\047\127\001\002" +
    "\000\004\010\143\001\002\000\004\010\134\001\002\000" +
    "\004\051\124\001\002\000\010\010\uffe7\046\125\047\127" +
    "\001\002\000\006\043\uffe4\051\uffe4\001\002\000\006\043" +
    "\123\051\130\001\002\000\006\043\uffe3\051\uffe3\001\002" +
    "\000\010\010\uffe5\046\125\047\127\001\002\000\004\010" +
    "\uffe6\001\002\000\006\043\123\051\130\001\002\000\004" +
    "\010\uffe8\001\002\000\004\014\135\001\002\000\004\025" +
    "\136\001\002\000\030\004\025\015\015\016\023\025\ufff6" +
    "\033\016\035\013\036\032\040\017\042\014\050\024\051" +
    "\026\001\002\000\004\025\140\001\002\000\030\004\025" +
    "\015\015\016\023\021\141\033\016\035\013\036\032\040" +
    "\017\042\014\050\024\051\026\001\002\000\006\025\uffd9" +
    "\031\uffd9\001\002\000\004\025\ufff7\001\002\000\004\014" +
    "\144\001\002\000\004\025\145\001\002\000\030\004\025" +
    "\015\015\016\023\025\ufff6\033\016\035\013\036\032\040" +
    "\017\042\014\050\024\051\026\001\002\000\004\025\147" +
    "\001\002\000\030\004\025\015\015\016\023\021\150\033" +
    "\016\035\013\036\032\040\017\042\014\050\024\051\026" +
    "\001\002\000\006\025\uffd8\031\uffd8\001\002\000\004\051" +
    "\152\001\002\000\004\010\153\001\002\000\004\014\154" +
    "\001\002\000\004\025\155\001\002\000\006\017\160\025" +
    "\uffd5\001\002\000\004\025\uffd6\001\002\000\004\025\170" +
    "\001\002\000\012\015\067\036\032\050\024\051\106\001" +
    "\002\000\004\034\162\001\002\000\004\025\163\001\002" +
    "\000\030\004\025\015\015\016\023\025\ufff6\033\016\035" +
    "\013\036\032\040\017\042\014\050\024\051\026\001\002" +
    "\000\004\025\165\001\002\000\030\004\025\015\015\016" +
    "\023\020\166\033\016\035\013\036\032\040\017\042\014" +
    "\050\024\051\026\001\002\000\004\032\167\001\002\000" +
    "\004\025\uffd4\001\002\000\006\017\160\021\172\001\002" +
    "\000\004\025\uffd7\001\002\000\004\025\ufff0\001\002\000" +
    "\032\004\025\015\015\016\023\021\175\025\176\033\016" +
    "\035\013\036\032\040\017\042\014\050\024\051\026\001" +
    "\002\000\004\002\000\001\002\000\006\021\175\025\254" +
    "\001\002\000\010\015\200\035\177\044\201\001\002\000" +
    "\004\051\237\001\002\000\004\051\214\001\002\000\004" +
    "\051\202\001\002\000\004\007\203\001\002\000\012\010" +
    "\042\015\044\035\043\051\041\001\002\000\004\014\205" +
    "\001\002\000\004\025\206\001\002\000\030\004\ufffa\015" +
    "\ufffa\016\ufffa\025\ufffa\033\ufffa\035\ufffa\036\ufffa\040\ufffa" +
    "\042\ufffa\050\ufffa\051\ufffa\001\002\000\030\004\025\015" +
    "\015\016\023\025\ufff6\033\016\035\013\036\032\040\017" +
    "\042\014\050\024\051\026\001\002\000\004\025\211\001" +
    "\002\000\032\004\025\015\015\016\023\021\ufff9\025\ufff9" +
    "\033\016\035\013\036\032\040\017\042\014\050\024\051" +
    "\026\001\002\000\006\021\175\025\176\001\002\000\004" +
    "\002\ufffc\001\002\000\004\007\215\001\002\000\012\010" +
    "\042\015\044\035\043\051\041\001\002\000\004\014\217" +
    "\001\002\000\004\025\220\001\002\000\030\004\ufffa\015" +
    "\ufffa\016\ufffa\025\ufffa\033\ufffa\035\ufffa\036\ufffa\040\ufffa" +
    "\042\ufffa\050\ufffa\051\ufffa\001\002\000\030\004\025\015" +
    "\015\016\023\025\ufff6\033\016\035\013\036\032\040\017" +
    "\042\014\050\024\051\026\001\002\000\004\025\223\001" +
    "\002\000\030\004\025\015\015\016\023\033\016\035\013" +
    "\036\032\040\017\042\014\045\224\050\024\051\026\001" +
    "\002\000\010\050\232\051\231\052\233\001\002\000\004" +
    "\025\ufff9\001\002\000\004\025\227\001\002\000\006\021" +
    "\175\025\176\001\002\000\004\002\ufffe\001\002\000\004" +
    "\032\236\001\002\000\004\032\235\001\002\000\004\032" +
    "\234\001\002\000\004\025\uffb9\001\002\000\004\025\uffba" +
    "\001\002\000\004\025\uffbb\001\002\000\004\007\240\001" +
    "\002\000\012\010\042\015\044\035\043\051\041\001\002" +
    "\000\004\014\242\001\002\000\004\025\243\001\002\000" +
    "\030\004\ufffa\015\ufffa\016\ufffa\025\ufffa\033\ufffa\035\ufffa" +
    "\036\ufffa\040\ufffa\042\ufffa\050\ufffa\051\ufffa\001\002\000" +
    "\030\004\025\015\015\016\023\025\ufff6\033\016\035\013" +
    "\036\032\040\017\042\014\050\024\051\026\001\002\000" +
    "\004\025\246\001\002\000\030\004\025\015\015\016\023" +
    "\033\016\035\013\036\032\040\017\042\014\045\224\050" +
    "\024\051\026\001\002\000\004\025\ufff9\001\002\000\004" +
    "\025\251\001\002\000\006\021\175\025\176\001\002\000" +
    "\004\002\ufffd\001\002\000\004\002\ufffb\001\002\000\012" +
    "\002\uffff\015\200\035\177\044\201\001\002\000\004\014" +
    "\256\001\002\000\004\025\257\001\002\000\030\004\025" +
    "\015\015\016\023\025\ufff6\033\016\035\013\036\032\040" +
    "\017\042\014\050\024\051\026\001\002\000\004\025\261" +
    "\001\002\000\030\004\025\015\015\016\023\021\262\033" +
    "\016\035\013\036\032\040\017\042\014\050\024\051\026" +
    "\001\002\000\004\025\ufff5\001\002\000\004\025\uffed\001" +
    "\002\000\016\010\uffce\015\067\036\032\043\123\050\024" +
    "\051\120\001\002\000\004\025\ufff2\001\002\000\004\010" +
    "\300\001\002\000\004\010\270\001\002\000\004\014\271" +
    "\001\002\000\004\025\272\001\002\000\030\004\ufffa\015" +
    "\ufffa\016\ufffa\025\ufffa\033\ufffa\035\ufffa\036\ufffa\040\ufffa" +
    "\042\ufffa\050\ufffa\051\ufffa\001\002\000\030\004\025\015" +
    "\015\016\023\025\ufff6\033\016\035\013\036\032\040\017" +
    "\042\014\050\024\051\026\001\002\000\004\025\275\001" +
    "\002\000\030\004\025\015\015\016\023\021\ufff9\033\016" +
    "\035\013\036\032\040\017\042\014\050\024\051\026\001" +
    "\002\000\004\021\277\001\002\000\004\025\uffe9\001\002" +
    "\000\004\014\301\001\002\000\004\025\302\001\002\000" +
    "\030\004\ufffa\015\ufffa\016\ufffa\025\ufffa\033\ufffa\035\ufffa" +
    "\036\ufffa\040\ufffa\042\ufffa\050\ufffa\051\ufffa\001\002\000" +
    "\030\004\025\015\015\016\023\025\ufff6\033\016\035\013" +
    "\036\032\040\017\042\014\050\024\051\026\001\002\000" +
    "\004\025\305\001\002\000\030\004\025\015\015\016\023" +
    "\021\ufff9\033\016\035\013\036\032\040\017\042\014\050" +
    "\024\051\026\001\002\000\004\021\307\001\002\000\004" +
    "\025\uffea\001\002\000\006\013\311\032\072\001\002\000" +
    "\014\015\067\036\032\041\315\050\313\051\312\001\002" +
    "\000\016\005\uffc4\006\uffc4\022\uffc4\023\uffc4\024\uffc4\032" +
    "\076\001\002\000\016\005\uffc8\006\uffc8\022\uffc8\023\uffc8" +
    "\024\uffc8\032\075\001\002\000\014\005\323\006\322\022" +
    "\325\023\324\024\321\001\002\000\004\007\316\001\002" +
    "\000\004\010\317\001\002\000\004\032\320\001\002\000" +
    "\004\025\uffec\001\002\000\012\015\067\036\032\050\024" +
    "\051\106\001\002\000\012\015\067\036\032\050\024\051" +
    "\106\001\002\000\012\015\067\036\032\050\024\051\106" +
    "\001\002\000\012\015\067\036\032\050\024\051\106\001" +
    "\002\000\012\015\067\036\032\050\024\051\106\001\002" +
    "\000\004\032\327\001\002\000\004\025\uffcb\001\002\000" +
    "\004\032\331\001\002\000\004\025\uffcc\001\002\000\004" +
    "\032\333\001\002\000\004\025\uffcd\001\002\000\004\032" +
    "\335\001\002\000\004\025\uffc9\001\002\000\004\032\337" +
    "\001\002\000\004\025\uffca\001\002\000\004\051\341\001" +
    "\002\000\004\010\344\001\002\000\004\032\343\001\002" +
    "\000\004\025\uffeb\001\002\000\004\032\uffe2\001\002\000" +
    "\006\013\346\032\347\001\002\000\016\015\067\032\uffce" +
    "\036\032\050\024\051\106\052\350\001\002\000\004\025" +
    "\uffc1\001\002\000\004\032\353\001\002\000\004\032\352" +
    "\001\002\000\004\025\uffbe\001\002\000\004\025\uffc2\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\352\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\003\020\004\027\005\017\007\026\010" +
    "\030\013\011\014\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\064\007\063\001\001\000\004\015\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\111" +
    "\001\001\000\004\007\110\001\001\000\004\007\107\001" +
    "\001\000\004\007\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\006\121\007\063\022" +
    "\120\001\001\000\004\023\131\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\125\001" +
    "\001\000\002\001\001\000\004\022\130\001\001\000\002" +
    "\001\001\000\004\023\131\001\001\000\002\001\001\000" +
    "\004\022\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\136\004\027\005\017\007" +
    "\026\010\030\013\011\014\021\001\001\000\002\001\001" +
    "\000\016\004\141\005\017\007\026\010\030\013\011\014" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\145\004\027\005" +
    "\017\007\026\010\030\013\011\014\021\001\001\000\002" +
    "\001\001\000\016\004\141\005\017\007\026\010\030\013" +
    "\011\014\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\156\012\155\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\160\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\003\163\004\027\005\017\007\026" +
    "\010\030\013\011\014\021\001\001\000\002\001\001\000" +
    "\016\004\141\005\017\007\026\010\030\013\011\014\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\170\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\004\141\005\017\007\026\010\030\013\011\014\021\016" +
    "\173\001\001\000\002\001\001\000\004\016\252\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\203\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\206\001" +
    "\001\000\020\003\207\004\027\005\017\007\026\010\030" +
    "\013\011\014\021\001\001\000\002\001\001\000\020\004" +
    "\141\005\017\007\026\010\030\013\011\014\021\025\211" +
    "\001\001\000\004\016\212\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\215\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\220\001\001\000\020\003" +
    "\221\004\027\005\017\007\026\010\030\013\011\014\021" +
    "\001\001\000\002\001\001\000\020\004\141\005\017\007" +
    "\026\010\030\013\011\014\021\021\224\001\001\000\002" +
    "\001\001\000\004\025\225\001\001\000\002\001\001\000" +
    "\004\016\227\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\240\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\243\001\001\000\020\003\244\004\027\005\017" +
    "\007\026\010\030\013\011\014\021\001\001\000\002\001" +
    "\001\000\020\004\141\005\017\007\026\010\030\013\011" +
    "\014\021\021\246\001\001\000\004\025\247\001\001\000" +
    "\002\001\001\000\004\016\251\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\003\257\004\027\005\017\007\026" +
    "\010\030\013\011\014\021\001\001\000\002\001\001\000" +
    "\016\004\141\005\017\007\026\010\030\013\011\014\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\006" +
    "\265\007\063\020\264\022\266\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\272\001\001\000\020\003\273" +
    "\004\027\005\017\007\026\010\030\013\011\014\021\001" +
    "\001\000\002\001\001\000\020\004\141\005\017\007\026" +
    "\010\030\013\011\014\021\025\275\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\302\001\001\000\020\003\303\004\027\005" +
    "\017\007\026\010\030\013\011\014\021\001\001\000\002" +
    "\001\001\000\020\004\141\005\017\007\026\010\030\013" +
    "\011\014\021\025\305\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\313\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\335\001\001\000\004\007\333\001\001" +
    "\000\004\007\331\001\001\000\004\007\327\001\001\000" +
    "\004\007\325\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\341\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\350\007\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

 TablaVariables tv = new TablaVariables(); TABLASIMBOLOS TS = new TABLASIMBOLOS(); int prof = 0; 
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= I EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolI start_val = (SymbolI)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // I ::= MAIN LPAREN RPAREN LCLAVE NEWLINE P NEWLINE SUBP 
            {
              SymbolI RESULT =null;
		 RESULT = new SymbolI(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SUBP ::= RCLAVE NEWLINE 
            {
              SymbolSubP RESULT =null;
		          RESULT = new SymbolSubP();                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBP",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SUBP ::= NEWLINE ENTER ID LPAREN ARGS1 LCLAVE NEWLINE ENTRAB P NEWLINE RetInstr SURTB NEWLINE SUBP 
            {
              SymbolSubP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		SymbolENTRAB e4 = (SymbolENTRAB)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolRetInstr e3 = (SymbolRetInstr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		  RESULT = new SymbolSubP();
                                                                                                                      if(e3.esBool){
                                                                                                                          System.out.println("ERROR: DEBE DEVOLVER ENTERO");
                                                                                                                        }
                                                                                                                        descripcion d = new descripcion(tipoDescripcion.Funcio, tipoSub.tipoSubInt);
                                                                                                                        TS.afegir(e1,d);
                                                                                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBP",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SUBP ::= NEWLINE BOOL ID LPAREN ARGS1 LCLAVE NEWLINE ENTRAB P NEWLINE RetInstr SURTB NEWLINE SUBP 
            {
              SymbolSubP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		SymbolENTRAB e4 = (SymbolENTRAB)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolRetInstr e3 = (SymbolRetInstr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		         RESULT = new SymbolSubP(); 
                                                                                                                     if(!e3.esBool){
                                                                                                                          System.out.println("ERROR: DEBE DEVOLVER BOOLEANO");
                                                                                                                        }
                                                                                                                        descripcion d = new descripcion(tipoDescripcion.Funcio, tipoSub.tipoSubBool);
                                                                                                                        TS.afegir(e1,d);
                                                                                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBP",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SUBP ::= NEWLINE VOID ID LPAREN ARGS1 LCLAVE NEWLINE ENTRAB P NEWLINE SURTB SUBP 
            {
              SymbolSubP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymbolENTRAB e4 = (SymbolENTRAB)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		  RESULT = new SymbolSubP();
                                                                                                                        descripcion d = new descripcion(tipoDescripcion.Funcio, tipoSub.tipoSubInt);
                                                                                                                        TS.afegir(e1,d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBP",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SUBP ::= RCLAVE SUBP 
            {
              SymbolSubP RESULT =null;
		         RESULT = new SymbolSubP();                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBP",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ENTRAB ::= 
            {
              SymbolENTRAB RESULT =null;
		 TS.entrabloc(); RESULT = new SymbolENTRAB(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENTRAB",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SURTB ::= 
            {
              SymbolSURTB RESULT =null;
		 TS.surtbloc(); RESULT = new SymbolSURTB(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SURTB",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // P ::= instr 
            {
              SymbolP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Symbolinstr e1 = (Symbolinstr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolP(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // P ::= P NEWLINE instr 
            {
              SymbolP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Symbolinstr e1 = (Symbolinstr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolP(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // P ::= 
            {
              SymbolP RESULT =null;
		 RESULT = new SymbolP(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instr ::= CND ECOND LCLAVE NEWLINE P NEWLINE RCLAVE 
            {
              Symbolinstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		SymbolCND e1 = (SymbolCND)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolP e2 = (SymbolP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Symbolinstr(e1,e2); 
                                                                               
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instr ::= CND 
            {
              Symbolinstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolCND e1 = (SymbolCND)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Symbolinstr(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instr ::= ELp 
            {
              Symbolinstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolELp e1 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Symbolinstr(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instr ::= MENTRES LPAREN M 
            {
              Symbolinstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolM e1 = (SymbolM)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Symbolinstr(); 
                                                                                //TS.entrabloc();
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instr ::= SENTS 
            {
              Symbolinstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolSENTS e1 = (SymbolSENTS)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Symbolinstr(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instr ::= ELIGEIX LPAREN ID RPAREN LCLAVE NEWLINE CASOS NEWLINE RCLAVE 
            {
              Symbolinstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolCasos e2 = (SymbolCasos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Symbolinstr(); 
                                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instr ::= EB 
            {
              Symbolinstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolEB e1 = (SymbolEB)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instr ::= ARGS 
            {
              Symbolinstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolArgs e1 = (SymbolArgs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instr ::= NULL PNTCM 
            {
              Symbolinstr RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instr ::= ENTER ID IGUAL LECT LPAREN RPAREN PNTCM 
            {
              Symbolinstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		 System.out.println("Reconoce LECTURATECLADO"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instr ::= SORT LPAREN SortTec PNTCM 
            {
              Symbolinstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolSortTec e1 = (SymbolSortTec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 System.out.println("Reconoce SALIDAPANTALLA"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // M ::= EL RPAREN LCLAVE NEWLINE ENTRAB P NEWLINE SURTB RCLAVE 
            {
              SymbolM RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		SymbolEL e1 = (SymbolEL)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymbolENTRAB e4 = (SymbolENTRAB)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolP e2 = (SymbolP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new SymbolM(); 
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // M ::= AO RPAREN LCLAVE NEWLINE ENTRAB P NEWLINE SURTB RCLAVE 
            {
              SymbolM RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		SymbolAO e1 = (SymbolAO)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymbolENTRAB e4 = (SymbolENTRAB)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolP e2 = (SymbolP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new SymbolM(); 
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // AO ::= ID AOp AO 
            {
              SymbolAO RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 descripcion d1 = TS.consultarD(e1);
                                                                                if(d1 == null){
                                                                                System.out.println("ERROR: La variable "+e1+" no ha sido declarada previamente");
                                                                                }else{
                                                                                if(d1.tipoS!=tipoSub.tipoSubBool){
                                                                                System.out.println("ERROR: la variable debe de ser booleana");
                                                                                }} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AO",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // AO ::= NO ID 
            {
              SymbolAO RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 descripcion d1 = TS.consultarD(e1);
                                                                                if(d1 == null){
                                                                                System.out.println("ERROR: La variable "+e1+" no ha sido declarada previamente");
                                                                                }else{
                                                                                if(d1.tipoS!=tipoSub.tipoSubBool){
                                                                                System.out.println("ERROR: la variable debe de ser booleana");
                                                                                }}  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AO",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // AO ::= NO ID AOp AO 
            {
              SymbolAO RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 descripcion d1 = TS.consultarD(e1);
                                                                                if(d1 == null){
                                                                                System.out.println("ERROR: La variable "+e1+" no ha sido declarada previamente");
                                                                                }else{
                                                                                if(d1.tipoS!=tipoSub.tipoSubBool){
                                                                                System.out.println("ERROR: la variable debe de ser booleana");
                                                                                }} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AO",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // AO ::= ID 
            {
              SymbolAO RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		descripcion d1 = TS.consultarD(e1);
                                                                                if(d1 == null){
                                                                                System.out.println("ERROR: La variable "+e1+" no ha sido declarada previamente");
                                                                                }else{
                                                                                if(d1.tipoS!=tipoSub.tipoSubBool){
                                                                                System.out.println("ERROR: la variable debe de ser booleana");
                                                                                }} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AO",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // AOp ::= AND 
            {
              SymbolAOp RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AOp",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // AOp ::= OR 
            {
              SymbolAOp RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AOp",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SortTec ::= ID RPAREN 
            {
              SymbolSortTec RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SortTec",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ARGS ::= ID LPAREN ARGS1 PNTCM 
            {
              SymbolArgs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ARGS1 ::= ID RPAREN 
            {
              SymbolArgs1 RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS1",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ARGS1 ::= ENTER ID COMA ARGS1 
            {
              SymbolArgs1 RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS1",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ARGS1 ::= ENTER ID RPAREN 
            {
              SymbolArgs1 RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS1",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ARGS1 ::= BOOL ID COMA ARGS1 
            {
              SymbolArgs1 RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS1",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ARGS1 ::= BOOL ID RPAREN 
            {
              SymbolArgs1 RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS1",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ARGS1 ::= ID COMA ARGS1 
            {
              SymbolArgs1 RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS1",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ARGS1 ::= RPAREN 
            {
              SymbolArgs1 RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS1",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CND ::= COND LPAREN EL RPAREN LCLAVE NEWLINE P NEWLINE RCLAVE 
            {
              SymbolCND RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		SymbolEL e1 = (SymbolEL)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolP e2 = (SymbolP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new SymbolCND(e1,e2); 
                                                                                
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CND",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CND ::= COND LPAREN AO RPAREN LCLAVE NEWLINE P NEWLINE RCLAVE 
            {
              SymbolCND RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		SymbolAO e1 = (SymbolAO)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolP e2 = (SymbolP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new SymbolCND(); 
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CND",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CASOS ::= CASOS NEWLINE CASn 
            {
              SymbolCasos RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolCASn e2 = (SymbolCASn)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new SymbolCasos(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASOS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CASOS ::= CASn 
            {
              SymbolCasos RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolCASn e2 = (SymbolCASn)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new SymbolCasos(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASOS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CASOS ::= 
            {
              SymbolCasos RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASOS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CASn ::= CAS ELp DOSPUNTS NEWLINE P NEWLINE TALLA PNTCM 
            {
              SymbolCASn RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		SymbolELp v1 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolP e1 = (SymbolP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT= new SymbolCASn(v1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASn",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EL ::= ELp MENOR ELp 
            {
              SymbolEL RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolELp e3 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolELp e4 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolEL(ParserSym.MENOR, e3, e4); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EL",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EL ::= ELp MAYOR ELp 
            {
              SymbolEL RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolELp e3 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolELp e4 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolEL(ParserSym.MAYOR, e3, e4); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EL",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EL ::= ELp IGUAL IGUAL ELp 
            {
              SymbolEL RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolELp e3 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolELp e4 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolEL(ParserSym.IGUAL, e3, e4); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EL",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EL ::= ELp MAYIG ELp 
            {
              SymbolEL RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolELp e3 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolELp e4 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolEL(ParserSym.MAYIG, e3, e4); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EL",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EL ::= ELp MENIG ELp 
            {
              SymbolEL RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolELp e3 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolELp e4 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolEL(ParserSym.MENIG, e3, e4); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EL",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EL ::= 
            {
              SymbolEL RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EL",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTS ::= ENTER ID IGUAL ELp ADD ELp PNTCM 
            {
              SymbolSENTS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolELp e5 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolELp e6 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolSENTS(ParserSym.ADD, e5, e6,e1); 
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubInt);
                                                                                TS.afegir(e1,d);
                                                                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTS ::= ENTER ID IGUAL ELp MUL ELp PNTCM 
            {
              SymbolSENTS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolELp e5 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolELp e6 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolSENTS(ParserSym.MUL, e5, e6,e1);
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubInt);
                                                                                TS.afegir(e1,d);
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTS ::= ENTER ID IGUAL ELp DIV ELp PNTCM 
            {
              SymbolSENTS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolELp e5 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolELp e6 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolSENTS(ParserSym.DIV, e5, e6,e1); 
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubInt);
                                                                                TS.afegir(e1,d);
                                                                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTS ::= ENTER ID IGUAL ELp MOD ELp PNTCM 
            {
              SymbolSENTS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolELp e5 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolELp e6 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolSENTS(ParserSym.MOD, e5, e6,e1);
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubInt);
                                                                                TS.afegir(e1,d);
                                                                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTS ::= ENTER ID IGUAL ELp SUB ELp PNTCM 
            {
              SymbolSENTS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolELp e5 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolELp e6 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolSENTS(ParserSym.SUB, e5, e6,e1); 
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubInt);
                                                                                TS.afegir(e1,d);
                                                                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ELp ::= numero 
            {
              SymbolELp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolELp(Integer.parseInt(v)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ELp ::= ENTER ID IGUAL numero PNTCM 
            {
              SymbolELp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                                                                                RESULT = new SymbolELp(Integer.parseInt(v));
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubInt);
                                                                                TS.afegir(e1,d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ELp ::= ENTER ID IGUAL ID PNTCM 
            {
              SymbolELp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubInt);
                                                                                TS.afegir(e1,d);
                                                                                descripcion d2 = TS.consultarD(e2);
                                                                                if(d2 == null){
                                                                                System.out.println("ERROR: La variable "+e2+" no ha sido declarada previamente");
                                                                                }else if(d2.tipoS != tipoSub.tipoSubInt){
                                                                                System.out.println("ERROR NO COINCIDEN LOS TIPOS");
                                                                                }
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ELp ::= ENTER ID PNTCM 
            {
              SymbolELp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubInt);
                                                                                TS.afegir(e1,d);
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ELp ::= ID 
            {
              SymbolELp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolELp(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ELp ::= CONST ID IGUAL VBOOL PNTCM 
            {
              SymbolELp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EB ::= BOOL ID IGUAL VBOOL PNTCM 
            {
              SymbolEB RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubBool);
                                                                                TS.afegir(e1,d);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EB",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EB ::= BOOL ID PNTCM 
            {
              SymbolEB RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubBool);
                                                                                TS.afegir(e1,d);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EB",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EB ::= ID IGUAL VBOOL PNTCM 
            {
              SymbolEB RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                                descripcion d1 = TS.consultarD(e1);
                                                                                if(d1 == null){
                                                                                System.out.println("ERROR: La variable "+e1+" no ha sido declarada previamente");
                                                                                }else{
                                                                                if(d1.tipoS!=tipoSub.tipoSubBool){
                                                                                System.out.println("ERROR: la variable debe de ser booleana");
                                                                                } }
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EB",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EB ::= ID IGUAL EL PNTCM 
            {
              SymbolEB RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolEL e2 = (SymbolEL)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                                descripcion d1 = TS.consultarD(e1);
                                                                                if(d1 == null){
                                                                                System.out.println("ERROR: La variable "+e1+" no ha sido declarada previamente");
                                                                                }else{
                                                                                if(d1.tipoS!=tipoSub.tipoSubBool){
                                                                                System.out.println("ERROR: la variable debe de ser booleana");
                                                                                } }
                                                                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EB",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EB ::= BOOL ID IGUAL EL PNTCM 
            {
              SymbolEB RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolEL e2 = (SymbolEL)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubBool);
                                                                                TS.afegir(e1,d);
                                                                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EB",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EB ::= ID IGUAL numero PNTCM 
            {
              SymbolEB RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                                descripcion d1 = TS.consultarD(e1);
                                                                                if(d1 == null){
                                                                                System.out.println("ERROR: La variable "+e1+" no ha sido declarada previamente");
                                                                                }else{
                                                                                if(d1.tipoS!=tipoSub.tipoSubInt){
                                                                                System.out.println("ERROR: la variable debe de ser un ENTERO");
                                                                                }} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EB",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EB ::= ID IGUAL ID PNTCM 
            {
              SymbolEB RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 descripcion d1 = TS.consultarD(e1);
                                                                                descripcion d2 = TS.consultarD(e2);
                                                                                 if(d1 == null){
                                                                                System.out.println("ERROR: La variable "+e1+" no ha sido declarada previamente");
                                                                                }else if(d2 == null){
                                                                                System.out.println("ERROR: La variable "+e1+" no ha sido declarada previamente");
                                                                                }else if(d1.tipoS != d2.tipoS){
                                                                                System.out.println("ERROR NO COINCIDEN LOS TIPOS");
                                                                                }
                                                                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EB",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // RetInstr ::= RETORNA ID PNTCM 
            {
              SymbolRetInstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 descripcion d1 = TS.consultarD(e1);
                                                                                if(d1 == null){
                                                                                System.out.println("ERROR: La variable "+e1+" no ha sido declarada previamente");
                                                                                RESULT = new SymbolRetInstr();
                                                                                }else{
                                                                                if(d1.tipoS == tipoSub.tipoSubBool){
                                                                                RESULT = new SymbolRetInstr(true);
                                                                                }else{
                                                                                RESULT = new SymbolRetInstr(false);
                                                                                }
                                                                                }
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RetInstr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // RetInstr ::= RETORNA numero PNTCM 
            {
              SymbolRetInstr RESULT =null;
		 RESULT = new SymbolRetInstr(false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RetInstr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // RetInstr ::= RETORNA VBOOL PNTCM 
            {
              SymbolRetInstr RESULT =null;
		 RESULT = new SymbolRetInstr(false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RetInstr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
