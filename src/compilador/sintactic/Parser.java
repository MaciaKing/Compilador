
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compilador.sintactic;

import java_cup.runtime.*;
import compilador.sintactic.symbols.*;
import codiEnsamblador.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\132\000\002\002\004\000\002\002\014\000\002\020" +
    "\020\000\002\020\020\000\002\020\015\000\002\020\002" +
    "\000\002\030\002\000\002\034\002\000\002\031\002\000" +
    "\002\003\003\000\002\003\005\000\002\003\002\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\013\000\002\004\003\000\002\004\003" +
    "\000\002\004\004\000\002\004\007\000\002\004\006\000" +
    "\002\032\007\000\002\033\005\000\002\033\003\000\002" +
    "\033\002\000\002\022\007\000\002\022\004\000\002\023" +
    "\007\000\002\023\007\000\002\023\007\000\002\024\004" +
    "\000\002\026\005\000\002\026\004\000\002\026\006\000" +
    "\002\026\003\000\002\027\003\000\002\027\003\000\002" +
    "\021\004\000\002\016\005\000\002\016\004\000\002\017" +
    "\006\000\002\017\006\000\002\017\006\000\002\017\006" +
    "\000\002\005\006\000\002\005\006\000\002\006\010\000" +
    "\002\006\010\000\002\007\011\000\002\013\005\000\002" +
    "\013\003\000\002\013\002\000\002\014\012\000\002\010" +
    "\005\000\002\010\005\000\002\010\006\000\002\010\005" +
    "\000\002\010\005\000\002\012\011\000\002\012\011\000" +
    "\002\012\011\000\002\012\011\000\002\012\011\000\002" +
    "\012\010\000\002\012\010\000\002\012\010\000\002\012" +
    "\010\000\002\012\010\000\002\011\003\000\002\011\007" +
    "\000\002\011\010\000\002\011\004\000\002\011\007\000" +
    "\002\011\005\000\002\011\003\000\002\011\007\000\002" +
    "\011\006\000\002\015\007\000\002\015\005\000\002\015" +
    "\006\000\002\015\006\000\002\015\007\000\002\015\006" +
    "\000\002\015\006\000\002\015\006\000\002\015\007\000" +
    "\002\025\005\000\002\025\005\000\002\025\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0108\000\006\026\ufffc\050\004\001\002\000\010\015" +
    "\324\035\322\044\323\001\002\000\004\026\010\001\002" +
    "\000\004\002\007\001\002\000\004\002\001\001\002\000" +
    "\004\007\011\001\002\000\004\010\012\001\002\000\004" +
    "\014\013\001\002\000\004\025\014\001\002\000\036\003" +
    "\ufffa\004\ufffa\006\ufffa\015\ufffa\016\ufffa\025\ufffa\033\ufffa" +
    "\035\ufffa\036\ufffa\040\ufffa\041\ufffa\042\ufffa\051\ufffa\052" +
    "\ufffa\001\002\000\036\003\037\004\041\006\030\015\027" +
    "\016\032\025\ufff6\033\035\035\042\036\040\040\045\041" +
    "\033\042\022\051\023\052\026\001\002\000\004\025\ufff0" +
    "\001\002\000\036\003\037\004\041\006\030\015\027\016" +
    "\032\025\ufff6\033\035\035\042\036\040\040\045\041\033" +
    "\042\022\051\023\052\026\001\002\000\004\025\ufff5\001" +
    "\002\000\036\003\037\004\041\006\030\015\027\016\032" +
    "\025\ufff6\033\035\035\042\036\040\040\045\041\033\042" +
    "\022\051\023\052\026\001\002\000\004\007\306\001\002" +
    "\000\024\010\uffbc\011\uffbc\012\uffbc\013\uffbc\025\uffbc\027" +
    "\uffbc\030\uffbc\032\uffbc\034\uffbc\001\002\000\004\025\304" +
    "\001\002\000\004\025\ufff3\001\002\000\010\007\126\013" +
    "\253\025\uffb6\001\002\000\004\052\225\001\002\000\004" +
    "\051\224\001\002\000\004\025\ufff2\001\002\000\004\007" +
    "\202\001\002\000\004\007\176\001\002\000\036\003\037" +
    "\004\041\006\030\015\027\016\032\025\ufff6\033\035\035" +
    "\042\036\040\040\045\041\033\042\022\051\023\052\026" +
    "\001\002\000\004\007\166\001\002\000\004\025\ufff4\001" +
    "\002\000\004\032\165\001\002\000\004\052\161\001\002" +
    "\000\004\007\150\001\002\000\004\052\136\001\002\000" +
    "\004\025\ufff8\001\002\000\020\006\030\015\050\036\040" +
    "\043\051\051\023\052\052\053\054\001\002\000\004\032" +
    "\047\001\002\000\004\025\uffef\001\002\000\004\025\uffee" +
    "\001\002\000\004\052\114\001\002\000\004\052\111\001" +
    "\002\000\022\010\uffde\011\uffb6\012\uffb6\013\uffb6\027\uffb6" +
    "\030\uffb6\046\104\047\106\001\002\000\004\010\101\001" +
    "\002\000\004\010\076\001\002\000\014\011\064\012\066" +
    "\013\062\027\065\030\063\001\002\000\004\010\057\001" +
    "\002\000\004\014\060\001\002\000\004\025\061\001\002" +
    "\000\036\003\uffe3\004\uffe3\006\uffe3\015\uffe3\016\uffe3\025" +
    "\uffe3\033\uffe3\035\uffe3\036\uffe3\040\uffe3\041\uffe3\042\uffe3" +
    "\051\uffe3\052\uffe3\001\002\000\004\013\074\001\002\000" +
    "\014\006\030\015\050\036\040\051\023\052\067\001\002" +
    "\000\014\006\030\015\050\036\040\051\023\052\067\001" +
    "\002\000\014\006\030\015\050\036\040\051\023\052\067" +
    "\001\002\000\014\006\030\015\050\036\040\051\023\052" +
    "\067\001\002\000\010\010\uffb6\032\uffb6\034\uffb6\001\002" +
    "\000\006\010\uffca\032\uffca\001\002\000\006\010\uffc8\032" +
    "\uffc8\001\002\000\006\010\uffcb\032\uffcb\001\002\000\006" +
    "\010\uffc7\032\uffc7\001\002\000\014\006\030\015\050\036" +
    "\040\051\023\052\067\001\002\000\006\010\uffc9\032\uffc9" +
    "\001\002\000\004\014\077\001\002\000\004\025\100\001" +
    "\002\000\036\003\uffe4\004\uffe4\006\uffe4\015\uffe4\016\uffe4" +
    "\025\uffe4\033\uffe4\035\uffe4\036\uffe4\040\uffe4\041\uffe4\042" +
    "\uffe4\051\uffe4\052\uffe4\001\002\000\004\014\102\001\002" +
    "\000\004\025\103\001\002\000\036\003\uffe5\004\uffe5\006" +
    "\uffe5\015\uffe5\016\uffe5\025\uffe5\033\uffe5\035\uffe5\036\uffe5" +
    "\040\uffe5\041\uffe5\042\uffe5\051\uffe5\052\uffe5\001\002\000" +
    "\006\043\uffdd\052\uffdd\001\002\000\006\043\051\052\107" +
    "\001\002\000\006\043\uffdc\052\uffdc\001\002\000\010\010" +
    "\uffde\046\104\047\106\001\002\000\004\010\uffe1\001\002" +
    "\000\010\010\uffe0\046\104\047\106\001\002\000\006\043" +
    "\051\052\107\001\002\000\004\010\uffdf\001\002\000\006" +
    "\013\115\032\116\001\002\000\010\006\121\051\120\052" +
    "\117\001\002\000\036\005\uffb7\006\uffb7\010\uffb7\011\uffb7" +
    "\012\uffb7\013\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\027" +
    "\uffb7\030\uffb7\032\uffb7\034\uffb7\001\002\000\006\007\126" +
    "\032\127\001\002\000\004\032\125\001\002\000\004\051" +
    "\123\001\002\000\036\005\uffb4\006\uffb4\010\uffb4\011\uffb4" +
    "\012\uffb4\013\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\027" +
    "\uffb4\030\uffb4\032\uffb4\034\uffb4\001\002\000\004\032\124" +
    "\001\002\000\036\005\uffba\006\uffba\010\uffba\011\uffba\012" +
    "\uffba\013\uffba\022\uffba\023\uffba\024\uffba\025\uffba\027\uffba" +
    "\030\uffba\032\uffba\034\uffba\001\002\000\036\005\uffbb\006" +
    "\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb\022\uffbb\023\uffbb" +
    "\024\uffbb\025\uffbb\027\uffbb\030\uffbb\032\uffbb\034\uffbb\001" +
    "\002\000\010\010\uffe8\037\uffe8\052\130\001\002\000\036" +
    "\005\uffb8\006\uffb8\010\uffb8\011\uffb8\012\uffb8\013\uffb8\022" +
    "\uffb8\023\uffb8\024\uffb8\025\uffb8\027\uffb8\030\uffb8\032\uffb8" +
    "\034\uffb8\001\002\000\006\010\uffe9\037\uffe9\001\002\000" +
    "\006\010\133\037\132\001\002\000\004\052\135\001\002" +
    "\000\004\032\134\001\002\000\036\005\uffeb\006\uffeb\010" +
    "\uffeb\011\uffeb\012\uffeb\013\uffeb\022\uffeb\023\uffeb\024\uffeb" +
    "\025\uffeb\027\uffeb\030\uffeb\032\uffeb\034\uffeb\001\002\000" +
    "\006\010\uffea\037\uffea\001\002\000\006\013\137\032\140" +
    "\001\002\000\016\006\030\015\050\036\040\051\023\052" +
    "\141\053\143\001\002\000\004\025\uffb2\001\002\000\020" +
    "\007\126\011\uffb6\012\uffb6\013\uffb6\027\uffb6\030\uffb6\032" +
    "\147\001\002\000\004\032\146\001\002\000\004\032\145" +
    "\001\002\000\004\025\uffac\001\002\000\004\025\uffb3\001" +
    "\002\000\004\025\uffaf\001\002\000\004\025\uffab\001\002" +
    "\000\016\006\030\015\050\036\040\043\051\051\023\052" +
    "\052\001\002\000\004\010\156\001\002\000\004\010\153" +
    "\001\002\000\004\014\154\001\002\000\004\025\155\001" +
    "\002\000\036\003\uffd1\004\uffd1\006\uffd1\015\uffd1\016\uffd1" +
    "\025\uffd1\033\uffd1\035\uffd1\036\uffd1\040\uffd1\041\uffd1\042" +
    "\uffd1\051\uffd1\052\uffd1\001\002\000\004\014\157\001\002" +
    "\000\004\025\160\001\002\000\036\003\uffd2\004\uffd2\006" +
    "\uffd2\015\uffd2\016\uffd2\025\uffd2\033\uffd2\035\uffd2\036\uffd2" +
    "\040\uffd2\041\uffd2\042\uffd2\051\uffd2\052\uffd2\001\002\000" +
    "\004\013\162\001\002\000\004\053\163\001\002\000\004" +
    "\032\164\001\002\000\036\005\uffb5\006\uffb5\010\uffb5\011" +
    "\uffb5\012\uffb5\013\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5" +
    "\027\uffb5\030\uffb5\032\uffb5\034\uffb5\001\002\000\004\025" +
    "\uffe6\001\002\000\020\006\uffe2\015\uffe2\036\uffe2\043\uffe2" +
    "\051\uffe2\052\uffe2\053\uffe2\001\002\000\004\025\170\001" +
    "\002\000\036\003\037\004\041\006\030\015\027\016\032" +
    "\021\171\033\035\035\042\036\040\040\045\041\033\042" +
    "\022\051\023\052\026\001\002\000\006\025\uffd4\031\173" +
    "\001\002\000\004\025\ufff7\001\002\000\004\014\174\001" +
    "\002\000\004\025\175\001\002\000\036\003\uffd0\004\uffd0" +
    "\006\uffd0\015\uffd0\016\uffd0\025\uffd0\033\uffd0\035\uffd0\036" +
    "\uffd0\040\uffd0\041\uffd0\042\uffd0\051\uffd0\052\uffd0\001\002" +
    "\000\004\052\177\001\002\000\004\010\200\001\002\000" +
    "\004\032\201\001\002\000\004\025\uffed\001\002\000\004" +
    "\052\203\001\002\000\004\010\204\001\002\000\004\014" +
    "\205\001\002\000\004\025\206\001\002\000\006\017\211" +
    "\025\uffcd\001\002\000\004\025\uffce\001\002\000\004\025" +
    "\221\001\002\000\014\006\030\015\050\036\040\051\023" +
    "\052\067\001\002\000\004\034\213\001\002\000\004\025" +
    "\214\001\002\000\036\003\037\004\041\006\030\015\027" +
    "\016\032\025\ufff6\033\035\035\042\036\040\040\045\041" +
    "\033\042\022\051\023\052\026\001\002\000\004\025\216" +
    "\001\002\000\036\003\037\004\041\006\030\015\027\016" +
    "\032\020\217\033\035\035\042\036\040\040\045\041\033" +
    "\042\022\051\023\052\026\001\002\000\004\032\220\001" +
    "\002\000\004\025\uffcc\001\002\000\006\017\211\021\223" +
    "\001\002\000\004\025\uffcf\001\002\000\004\025\ufff1\001" +
    "\002\000\036\005\uffb9\006\uffb9\010\uffb9\011\uffb9\012\uffb9" +
    "\013\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\027\uffb9\030" +
    "\uffb9\032\uffb9\034\uffb9\001\002\000\006\013\226\032\116" +
    "\001\002\000\014\006\231\015\050\036\040\051\230\052" +
    "\227\001\002\000\020\005\uffb6\006\uffb6\007\126\022\uffb6" +
    "\023\uffb6\024\uffb6\032\127\001\002\000\016\005\uffbc\006" +
    "\uffbc\022\uffbc\023\uffbc\024\uffbc\032\125\001\002\000\004" +
    "\051\252\001\002\000\014\005\236\006\234\022\237\023" +
    "\235\024\233\001\002\000\014\006\030\015\050\036\040" +
    "\051\023\052\067\001\002\000\014\006\030\015\050\036" +
    "\040\051\023\052\067\001\002\000\014\006\030\015\050" +
    "\036\040\051\023\052\067\001\002\000\014\006\030\015" +
    "\050\036\040\051\023\052\067\001\002\000\014\006\030" +
    "\015\050\036\040\051\023\052\067\001\002\000\004\032" +
    "\241\001\002\000\004\025\uffc4\001\002\000\004\032\243" +
    "\001\002\000\004\025\uffc6\001\002\000\004\032\245\001" +
    "\002\000\004\025\uffc5\001\002\000\004\032\247\001\002" +
    "\000\004\025\uffc2\001\002\000\004\032\251\001\002\000" +
    "\004\025\uffc3\001\002\000\016\005\uffb9\006\uffb9\022\uffb9" +
    "\023\uffb9\024\uffb9\032\124\001\002\000\016\006\030\015" +
    "\050\036\040\051\255\052\254\053\260\001\002\000\030" +
    "\005\uffb6\006\uffb6\011\uffb6\012\uffb6\013\uffb6\022\uffb6\023" +
    "\uffb6\024\uffb6\027\uffb6\030\uffb6\032\303\001\002\000\030" +
    "\005\uffbc\006\uffbc\011\uffbc\012\uffbc\013\uffbc\022\uffbc\023" +
    "\uffbc\024\uffbc\027\uffbc\030\uffbc\032\302\001\002\000\026" +
    "\005\264\006\265\011\064\012\066\013\062\022\266\023" +
    "\267\024\263\027\065\030\063\001\002\000\004\032\262" +
    "\001\002\000\004\032\261\001\002\000\004\025\uffb1\001" +
    "\002\000\004\025\uffb0\001\002\000\014\006\030\015\050" +
    "\036\040\051\023\052\067\001\002\000\014\006\030\015" +
    "\050\036\040\051\023\052\067\001\002\000\014\006\030" +
    "\015\050\036\040\051\023\052\067\001\002\000\014\006" +
    "\030\015\050\036\040\051\023\052\067\001\002\000\014" +
    "\006\030\015\050\036\040\051\023\052\067\001\002\000" +
    "\004\032\271\001\002\000\004\025\uffc0\001\002\000\004" +
    "\032\273\001\002\000\004\025\uffbf\001\002\000\004\032" +
    "\275\001\002\000\004\025\uffbd\001\002\000\004\032\277" +
    "\001\002\000\004\025\uffc1\001\002\000\004\032\301\001" +
    "\002\000\004\025\uffbe\001\002\000\004\025\uffae\001\002" +
    "\000\004\025\uffad\001\002\000\036\003\037\004\041\006" +
    "\030\015\027\016\032\021\305\033\035\035\042\036\040" +
    "\040\045\041\033\042\022\051\023\052\026\001\002\000" +
    "\004\002\000\001\002\000\004\052\307\001\002\000\004" +
    "\010\312\001\002\000\004\032\311\001\002\000\004\025" +
    "\uffec\001\002\000\004\032\uffdb\001\002\000\004\025\314" +
    "\001\002\000\036\003\037\004\041\006\030\015\027\016" +
    "\032\021\315\033\035\035\042\036\040\040\045\041\033" +
    "\042\022\051\023\052\026\001\002\000\004\025\ufff9\001" +
    "\002\000\004\025\uffe7\001\002\000\004\025\320\001\002" +
    "\000\036\003\037\004\041\006\030\015\027\016\032\021" +
    "\321\033\035\035\042\036\040\040\045\041\033\042\022" +
    "\051\023\052\026\001\002\000\004\025\uffd3\001\002\000" +
    "\004\052\ufffb\001\002\000\004\052\325\001\002\000\004" +
    "\052\325\001\002\000\004\007\360\001\002\000\006\010" +
    "\353\037\352\001\002\000\004\014\330\001\002\000\004" +
    "\025\331\001\002\000\036\003\ufffb\004\ufffb\006\ufffb\015" +
    "\ufffb\016\ufffb\025\ufffb\033\ufffb\035\ufffb\036\ufffb\040\ufffb" +
    "\041\ufffb\042\ufffb\051\ufffb\052\ufffb\001\002\000\036\003" +
    "\037\004\041\006\030\015\027\016\032\025\ufff6\033\035" +
    "\035\042\036\040\040\045\041\033\042\022\051\023\052" +
    "\026\001\002\000\004\025\334\001\002\000\036\003\037" +
    "\004\041\006\030\015\027\016\032\033\035\035\042\036" +
    "\040\040\045\041\033\042\022\045\335\051\023\052\026" +
    "\001\002\000\010\051\345\052\344\053\346\001\002\000" +
    "\004\025\ufff9\001\002\000\004\025\340\001\002\000\004" +
    "\021\341\001\002\000\004\025\342\001\002\000\010\025" +
    "\ufffc\026\ufffc\050\004\001\002\000\006\025\uffff\026\uffff" +
    "\001\002\000\004\032\351\001\002\000\004\032\350\001" +
    "\002\000\004\032\347\001\002\000\004\025\uffa8\001\002" +
    "\000\004\025\uffa9\001\002\000\004\025\uffaa\001\002\000" +
    "\006\015\355\035\354\001\002\000\004\014\uffd9\001\002" +
    "\000\004\052\357\001\002\000\004\052\356\001\002\000" +
    "\006\010\uffd7\037\uffd7\001\002\000\006\010\uffd5\037\uffd5" +
    "\001\002\000\010\010\361\015\363\035\362\001\002\000" +
    "\004\014\uffda\001\002\000\004\052\365\001\002\000\004" +
    "\052\364\001\002\000\006\010\uffd8\037\uffd8\001\002\000" +
    "\006\010\uffd6\037\uffd6\001\002\000\004\014\367\001\002" +
    "\000\004\025\370\001\002\000\036\003\037\004\041\006" +
    "\030\015\027\016\032\025\ufff6\033\035\035\042\036\040" +
    "\040\045\041\033\042\022\051\023\052\026\001\002\000" +
    "\004\025\372\001\002\000\036\003\037\004\041\006\030" +
    "\015\027\016\032\021\ufff9\033\035\035\042\036\040\040" +
    "\045\041\033\042\022\051\023\052\026\001\002\000\004" +
    "\021\374\001\002\000\006\025\ufffc\050\004\001\002\000" +
    "\004\025\376\001\002\000\006\025\ufffd\026\ufffd\001\002" +
    "\000\004\052\325\001\002\000\004\014\u0101\001\002\000" +
    "\004\025\u0102\001\002\000\036\003\037\004\041\006\030" +
    "\015\027\016\032\025\ufff6\033\035\035\042\036\040\040" +
    "\045\041\033\042\022\051\023\052\026\001\002\000\004" +
    "\025\u0104\001\002\000\036\003\037\004\041\006\030\015" +
    "\027\016\032\033\035\035\042\036\040\040\045\041\033" +
    "\042\022\045\335\051\023\052\026\001\002\000\004\025" +
    "\ufff9\001\002\000\004\025\u0107\001\002\000\004\021\u0108" +
    "\001\002\000\006\025\ufffc\050\004\001\002\000\004\025" +
    "\u010a\001\002\000\006\025\ufffe\026\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0108\000\006\002\005\020\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\014\001\001\000\032\003\023" +
    "\004\042\005\017\006\033\007\016\011\035\012\030\015" +
    "\015\022\024\023\020\024\043\032\045\001\001\000\002" +
    "\001\001\000\032\003\316\004\042\005\017\006\033\007" +
    "\016\011\035\012\030\015\015\022\024\023\020\024\043" +
    "\032\045\001\001\000\002\001\001\000\032\003\312\004" +
    "\042\005\017\006\033\007\016\011\035\012\030\015\015" +
    "\022\024\023\020\024\043\032\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\003\166\004\042\005\017\006\033\007\016\011\035\012" +
    "\030\015\015\022\024\023\020\024\043\032\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\052\011\054\026\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\072\001\001\000\004" +
    "\011\071\001\001\000\004\011\070\001\001\000\004\011" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\107" +
    "\001\001\000\002\001\001\000\004\027\104\001\001\000" +
    "\002\001\001\000\004\027\111\001\001\000\004\026\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\121\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\010\141\011" +
    "\054\032\143\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\150\011\054\026\151\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\004\171\005\017\006\033\007\016" +
    "\011\035\012\030\015\015\022\024\023\020\024\043\032" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\207\014\206\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\211\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\003\214\004\042" +
    "\005\017\006\033\007\016\011\035\012\030\015\015\022" +
    "\024\023\020\024\043\032\045\001\001\000\002\001\001" +
    "\000\030\004\171\005\017\006\033\007\016\011\035\012" +
    "\030\015\015\022\024\023\020\024\043\032\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\221\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\231\032\121\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\247\001\001\000\004\011\245\001" +
    "\001\000\004\011\243\001\001\000\004\011\241\001\001" +
    "\000\004\011\237\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\256\011\255\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\277\001" +
    "\001\000\004\011\275\001\001\000\004\011\273\001\001" +
    "\000\004\011\271\001\001\000\004\011\267\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\004\171\005" +
    "\017\006\033\007\016\011\035\012\030\015\015\022\024" +
    "\023\020\024\043\032\045\001\001\000\002\001\001\000" +
    "\004\021\307\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\004\171\005\017\006\033\007\016\011\035\012\030" +
    "\015\015\022\024\023\020\024\043\032\045\001\001\000" +
    "\004\031\315\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\004\171\005\017\006\033\007\016\011\035\012" +
    "\030\015\015\022\024\023\020\024\043\032\045\001\001" +
    "\000\002\001\001\000\004\030\376\001\001\000\006\016" +
    "\365\017\325\001\001\000\006\016\326\017\325\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\331\001\001\000\032\003\332" +
    "\004\042\005\017\006\033\007\016\011\035\012\030\015" +
    "\015\022\024\023\020\024\043\032\045\001\001\000\002" +
    "\001\001\000\032\004\171\005\017\006\033\007\016\011" +
    "\035\012\030\015\015\022\024\023\020\024\043\025\335" +
    "\032\045\001\001\000\002\001\001\000\004\031\336\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\342\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\003\370\004\042\005\017\006\033\007\016\011\035" +
    "\012\030\015\015\022\024\023\020\024\043\032\045\001" +
    "\001\000\002\001\001\000\032\004\171\005\017\006\033" +
    "\007\016\011\035\012\030\015\015\022\024\023\020\024" +
    "\043\031\372\032\045\001\001\000\002\001\001\000\004" +
    "\020\374\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\377\017\325\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\003\u0102\004\042\005\017\006\033\007" +
    "\016\011\035\012\030\015\015\022\024\023\020\024\043" +
    "\032\045\001\001\000\002\001\001\000\032\004\171\005" +
    "\017\006\033\007\016\011\035\012\030\015\015\022\024" +
    "\023\020\024\043\025\u0104\032\045\001\001\000\004\031" +
    "\u0105\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\u0108\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
  @Override
    public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
        report_error("Error sintàctic catastròfic", cur_token);
        done_parsing();        
    }

    @Override
    public void syntax_error(Symbol cur_token) {
        report_error("de sintaxis", cur_token);
    }

    @Override
    public void report_error(String message, Object info) {
        StringBuilder msg = new StringBuilder("ERROR");
        if (info instanceof Symbol) {
            ComplexSymbol token = (ComplexSymbol)info;
            Location l = token.getLeft();
            
            if (l != null) {
                msg.append(" (fila: ")
                   .append(l.getLine())
                   .append(", columna: ")
                   .append(l.getColumn())
                   .append(")");
            }
        }
        msg.append(": ").append(message);
        
        System.err.println(msg);
        Error er=new Error();
        er.causaError=msg.toString();
        GeneraEnsablador e= new GeneraEnsablador(); 
        e.generaError68k();
    }

    @Override
    public void report_fatal_error(String message, Object info) throws Exception {
        report_error("Error catastròfic ("+message+")", info);
        done_parsing();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

 int nv = 0; int np = 0; int nivel = 0; TablaVariables tv = new TablaVariables(); TABLASIMBOLOS TS = new TABLASIMBOLOS(); TablaProcedimientos tp = new TablaProcedimientos(); Codi3A c3a = new Codi3A(); Etiqueta e = new Etiqueta(); 
               Error er=new Error();
    
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= I EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolI start_val = (SymbolI)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // I ::= SUBP MAIN LPAREN RPAREN LCLAVE NEWLINE MAINSKIP P NEWLINE RCLAVE 
            {
              SymbolI RESULT =null;
		 RESULT = new SymbolI();
                                                                                                                    c3a.imprimeC3A();
                                                                                                                    c3a.generaFicheroC3A();
                                                                                                                    GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                                                    e.generaCodi68k();                                                                                                                       
                                                                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SUBP ::= FUNC ENTER ENCAP LCLAVE NEWLINE ENTRAB P NEWLINE RetInstr SURTB NEWLINE RCLAVE NEWLINE SUBP 
            {
              SymbolSubP RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		SymbolENCAP e2 = (SymbolENCAP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		SymbolRetInstr e3 = (SymbolRetInstr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		 RESULT = new SymbolSubP();
                                                                                                                if(e3.esBool){
                                                                                                                //System.out.println("ERROR: DEBE DEVOLVER ENTERO");
                                                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3));                                                                                                                                                                                              
                                                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": DEBE DEVOLVER ENTERO";
                                                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                                                e.generaError68k();
                                                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": DEBE DEVOLVER ENTERO");
                                                                                                                }
                                                                                                                //TOCA REVISAR ANTES DE HACER                                                                                                                
                                                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBP",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SUBP ::= FUNC BOOL ENTRAB ENCAP LCLAVE NEWLINE P NEWLINE RetInstr SURTB NEWLINE RCLAVE SUBP NEWLINE 
            {
              SymbolSubP RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		SymbolENCAP e2 = (SymbolENCAP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		SymbolRetInstr e3 = (SymbolRetInstr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		         RESULT = new SymbolSubP(); 
                                                                                                                if(!e3.esBool){
                                                                                                                //System.out.println("ERROR: DEBE DEVOLVER BOOLEANO");
                                                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5));                                                                                                                                                                                              
                                                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": ERROR: DEBE DEVOLVER BOOLEANO";
                                                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                                                e.generaError68k();
                                                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": ERROR: DEBE DEVOLVER BOOLEANO");        
                                                                                                                }
                                                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBP",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SUBP ::= FUNC VOID ENCAP LCLAVE NEWLINE P NEWLINE SURTB RCLAVE SUBP NEWLINE 
            {
              SymbolSubP RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		SymbolENCAP e2 = (SymbolENCAP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		  RESULT = new SymbolSubP();   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBP",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SUBP ::= 
            {
              SymbolSubP RESULT =null;
		 RESULT = new SymbolSubP();                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBP",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ENTRAB ::= 
            {
              SymbolENTRAB RESULT =null;
		 TS.entrabloc(); RESULT = new SymbolENTRAB(); nivel++; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENTRAB",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MAINSKIP ::= 
            {
              SymbolMAINSKIP RESULT =null;
		 c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,new OperandoC3A("E_MAIN",TiposOperandoC3A.etiqueta))); RESULT = new SymbolMAINSKIP(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAINSKIP",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SURTB ::= 
            {
              SymbolSURTB RESULT =null;
		 TS.surtbloc(); RESULT = new SymbolSURTB(); nivel--; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SURTB",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // P ::= instr 
            {
              SymbolP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Symbolinstr e1 = (Symbolinstr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolP(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // P ::= P NEWLINE instr 
            {
              SymbolP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Symbolinstr e1 = (Symbolinstr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolP(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // P ::= 
            {
              SymbolP RESULT =null;
		 RESULT = new SymbolP(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instr ::= CND 
            {
              Symbolinstr RESULT =null;
		 RESULT = new Symbolinstr(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instr ::= ELp 
            {
              Symbolinstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolELp e1 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Symbolinstr(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instr ::= M 
            {
              Symbolinstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolM e1 = (SymbolM)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Symbolinstr(); 
                                                                                //TS.entrabloc();
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instr ::= SENTS 
            {
              Symbolinstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolSENTS e1 = (SymbolSENTS)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Symbolinstr(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instr ::= ELIGEIX LPAREN ID RPAREN LCLAVE NEWLINE CASOS NEWLINE RCLAVE 
            {
              Symbolinstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolCasos e2 = (SymbolCasos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Symbolinstr(); 
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instr ::= EB 
            {
              Symbolinstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolEB e1 = (SymbolEB)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instr ::= CRIDAS 
            {
              Symbolinstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolCRIDAS e1 = (SymbolCRIDAS)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instr ::= NULL PNTCM 
            {
              Symbolinstr RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instr ::= LECT LPAREN ID RPAREN PNTCM 
            {
              Symbolinstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                                                                int idx = tv.getIdVariable(e1);
                                                                                variable v=tv.get(idx);
                                                                                OperandoC3A desti;
                                                                                desti = new OperandoC3A(e1,TiposOperandoC3A.parametro);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.PARAM_S,null,null,desti));
                                                                                desti = new OperandoC3A("escriure",TiposOperandoC3A.procedure);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.CALL,null,null,desti));
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instr ::= SORT LPAREN SortTec PNTCM 
            {
              Symbolinstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolSortTec e1 = (SymbolSortTec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 System.out.println("Reconoce SALIDAPANTALLA"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CRIDAS ::= ID LPAREN PARAM RPAREN PNTCM 
            {
              SymbolCRIDAS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolPARAM e2 = (SymbolPARAM)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                                                                descripcion d1 = TS.consultarD(e1);
                                                                                if(d1 == null){
                                                                                //System.out.println("ERROR: El subprograma -"+e1+"- no ha sido declarado PREVIAMENTE");
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5));                                                                                                                                                                                              
                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": El subprograma -"+e1+"- no ha sido declarado PREVIAMENTE";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": El subprograma -"+e1+"- no ha sido declarado PREVIAMENTE");
                                                                                                                
                                                                                }else if(d1.tipoDesc!=tipoDescripcion.Proc){
                                                                                //System.out.println("ERROR: El subprograma -"+e1+"- no existe");
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5));                                                                                                                                                                                              
                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": ERROR: El subprograma -"+e1+"- no existe";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": ERROR: El subprograma -"+e1+"- no existe");

                                                                                }else if(e2 == null && (d1.cantParamBool != 0 || d1.cantParamInt != 0)){
                                                                                //System.out.println("El subprograma "+e1+" TIENE PARAMETROS DISTINTOS");
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5));                                                                                                                                                                                              
                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": El subprograma -"+e1+"- TIENE PARAMETROS DISTINTOS";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": El subprograma -"+e1+"- TIENE PARAMETROS DISTINTOS");

                                                                                }else if(e2 == null && (d1.cantParamBool == 0 && d1.cantParamBool == 0)){
                                                                                //System.out.println("El subprograma "+e1+" ESTA PERFECTO (CASO SIN ARGUMENTOS)");
                                                                                e.addEtiqueta(e1);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.GOTO,null,null,new OperandoC3A(d1.etP.etiqueta, TiposOperandoC3A.etiqueta)));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,new OperandoC3A(e1,TiposOperandoC3A.etiqueta)));
                                                                                }else if(e2.nParamBool != d1.cantParamBool || e2.nParamInt != d1.cantParamInt){
                                                                                System.out.println("El subprograma "+e1+" TIENE PARAMETROS DISTINTOS");
                                                                                }else{
                                                                                int i;
                                                                                for(i = 0; i < d1.tArg.size(); i++){
                                                                                if(e2.tPar.get(i) != d1.tArg.get(i)){
                                                                                break;
                                                                                }
                                                                                }
                                                                                if(i<d1.tArg.size()){                                                                                
                                                                                System.out.println("El subprograma "+e1+" TIENE LOS ARGUMENTOS DESORDENADOS");
                                                                                }else{
                                                                                System.out.println("El subprograma "+e1+" ESTA PERFECTO (CASO CON ARGUMENTOS)");
                                                                                }
                                                                                e.addEtiqueta(e1);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.GOTO,null,null,new OperandoC3A(d1.etP.etiqueta, TiposOperandoC3A.etiqueta)));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,new OperandoC3A(e1,TiposOperandoC3A.etiqueta)));
                                                                                }
                                                                                RESULT = new SymbolCRIDAS(e1);  
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CRIDAS",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PARAM ::= PARAM COMA ID 
            {
              SymbolPARAM RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolPARAM e2 = (SymbolPARAM)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                descripcion d1 = TS.consultarD(e1);
                                                                                if(d1 != null){    
                                                                                if(d1.tipoS==tipoSub.tipoSubBool){
                                                                                e2.nParamBool++;
                                                                                RESULT = new SymbolPARAM(1,e2.tPar);
                                                                                }
                                                                                if(d1.tipoS==tipoSub.tipoSubInt){
                                                                                e2.nParamInt++;
                                                                                RESULT = new SymbolPARAM(0,e2.tPar);
                                                                                }
                                                                                }else{
                                                                                //ESTO DEBERIA DE FINALIZAR LA EJECUCION DEL PROGRAMA PERO AUN NO TENEMOS
                                                                                //ESO DISPONIBLE ASI QUE EL PROGRAMA SIGUE EJECUTANDOSE
                                                                                e2.nParamInt = 1000; //PONGO ESTO PORQUE ASI ME ASEGURO QUE SALTA EL SIGUIENTE ERROR 
                                                                                System.out.println("El parametro "+e1+" no ha sido declarado previamente");
                                                                                }
                                                                                
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PARAM ::= ID 
            {
              SymbolPARAM RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                descripcion d1 = TS.consultarD(e1);
                                                                                if(d1.tipoS==tipoSub.tipoSubBool){
                                                                                RESULT = new SymbolPARAM(1);
                                                                                }
                                                                                if(d1.tipoS==tipoSub.tipoSubInt){
                                                                                RESULT = new SymbolPARAM(0);
                                                                                }
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PARAM ::= 
            {
              SymbolPARAM RESULT =null;
		
                                                                                RESULT = new SymbolPARAM(); 
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // M ::= CM P NEWLINE RCLAVE SURTB 
            {
              SymbolM RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymbolCM e1 = (SymbolCM)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolP e2 = (SymbolP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new SymbolM(); 
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.GOTO,null,null,new OperandoC3A(e1.ei.getEtiqueta(),TiposOperandoC3A.etiqueta)));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,new OperandoC3A(e1.efi.getEtiqueta(),TiposOperandoC3A.etiqueta)));
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // M ::= error PNTCM 
            {
              SymbolM RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CM ::= Mm EL RPAREN LCLAVE NEWLINE 
            {
              SymbolCM RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymbolMm e2 = (SymbolMm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolEL e1 = (SymbolEL)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
                                                                                String efi = e.novaET();   
                                                                                if(e1.isLiteral1){
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.EQ,new OperandoC3A(String.valueOf(e1.r),TiposOperandoC3A.booleano),
                                                                                new OperandoC3A("0",TiposOperandoC3A.enteroLit),new OperandoC3A(efi,TiposOperandoC3A.etiqueta),true));
                                                                                }else{
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.EQ,new OperandoC3A(String.valueOf(e1.r),TiposOperandoC3A.booleano),
                                                                                new OperandoC3A("0",TiposOperandoC3A.variable),new OperandoC3A(efi,TiposOperandoC3A.etiqueta),true));
                                                                                }
                                                                                
                                                                                Etiqueta e = new Etiqueta(efi);
                                                                                RESULT = new SymbolCM(e,e2.ei);
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CM",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CM ::= Mm VBOOL RPAREN LCLAVE NEWLINE 
            {
              SymbolCM RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymbolMm e2 = (SymbolMm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
                                                                                String efi = e.novaET();
                                                                                
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.EQ,new OperandoC3A(String.valueOf(e1),TiposOperandoC3A.variable),  //----------------
                                                                                new OperandoC3A("0",TiposOperandoC3A.enteroLit),new OperandoC3A(efi,TiposOperandoC3A.etiqueta)));
                                                                                Etiqueta e = new Etiqueta(efi);
                                                                                RESULT = new SymbolCM(e,e2.ei);
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CM",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CM ::= Mm AO RPAREN LCLAVE NEWLINE 
            {
              SymbolCM RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymbolMm e1 = (SymbolMm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolAO e2 = (SymbolAO)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
                                                                                //LO MISMO QUE CON EL CONDICIONAL, TENGO QUE  
                                                                                //HABLAR CON PERE A VER COMO PODRIAMOS HACER ESTO
                                                                   
                                                                                RESULT = new SymbolCM();
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CM",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Mm ::= MENTRES LPAREN 
            {
              SymbolMm RESULT =null;
		
                                                                                String ei = e.novaET();
                                                                                OperandoC3A desti = new OperandoC3A(ei,TiposOperandoC3A.etiqueta);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti));
                                                                                TS.entrabloc();
                                                                                RESULT = new SymbolMm(new Etiqueta(ei));
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Mm",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // AO ::= ID AOp AO 
            {
              SymbolAO RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolAOp e3 = (SymbolAOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolAO e2 = (SymbolAO)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 descripcion d1 = TS.consultarD(e1);
                                                                                if(d1 == null){
                                                                                System.out.println("ERROR: La variable "+e1+" no ha sido declarada previamente");
                                                                                }else if(d1.tipoS!=tipoSub.tipoSubBool){
                                                                                System.out.println("ERROR: la variable debe de ser booleana");
                                                                                }else{
                                                                                //ESTA VARIABLE SERA EN LA QUE DEJEMOS EL RESULTADO DE LA ® (0=FALS,-1=CERT)
                                                                                Integer t = tv.addVariable(new variable(tipoSub.tipoSubBool, tp.getNP()));
                                                                                //CREAMOS LAS DOS ETIQUETAS PARA CONTROLAR EL VALOR QUE LE DAMOS EN FUNCION DEL RESULTADO DE LA ®
                                                                                String et1 = e.novaET();
                                                                                OperandoC3A desti1 = new OperandoC3A(et1,TiposOperandoC3A.etiqueta);
                                                                                //CREAMOS LOS OPERANDOS CON LOS DOS VALORES A EVALUAR
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                op1 = new OperandoC3A(String.valueOf(d1.valorBool),TiposOperandoC3A.enteroLit);                                                                              
                                                                                op2 = new OperandoC3A(String.valueOf(e2.r),TiposOperandoC3A.enteroLit);     
                                                                                if(e3.and){
                                                                                //AQUI HACEMOS UN AND Y GUARDAMOS EL RESULTADO EN LA VARIABLE TEMPORAL
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.AND,op1,op2,new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                //AQUI ESTAMOS ASIGNANDO A EL.r EL INDEX ASOCIADO A LA VARIABLE BOOLEANA RESULTANTE DE ESTA ®
                                                                                RESULT = new SymbolAO(t,(d1.valorBool&e2.vBool));
                                                                                }else{
                                                                                //AQUI HACEMOS UN OR Y GUARDAMOS EL RESULTADO EN LA VARIABLE TEMPORAL
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.OR,op1,op2,new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                //AQUI ESTAMOS ASIGNANDO A EL.r EL INDEX ASOCIADO A LA VARIABLE BOOLEANA RESULTANTE DE ESTA ®
                                                                                RESULT = new SymbolAO(t,(d1.valorBool|e2.vBool));
                                                                                }
                                                                                }
                                                                                //LA MOVIDA AQUI ES, COMO SACO EL VALOR BOOLEANO FINAL DE ESTO
                                                                                //ES DECIR COMO PUEDO SACAR EL VALOR FINAL DE TODA LA EXPRESION BOOLEANA             
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AO",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // AO ::= NO ID 
            {
              SymbolAO RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                descripcion d1 = TS.consultarD(e1);
                                                                                if(d1 == null){
                                                                                System.out.println("ERROR: La variable "+e1+" no ha sido declarada previamente");
                                                                                }else{
                                                                                if(d1.tipoS!=tipoSub.tipoSubBool){
                                                                                System.out.println("ERROR: la variable debe de ser booleana");
                                                                                }else{
                                                                                if(d1.valorBool == 0){
                                                                                //ESTA VARIABLE SERA EN LA QUE DEJEMOS EL RESULTADO DE LA ® (0=FALS,-1=CERT)
                                                                                Integer t = tv.addVariable(new variable(tipoSub.tipoSubBool, tp.getNP()));
                                                                                OperandoC3A op1 = new OperandoC3A("-1",TiposOperandoC3A.enteroLit);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,op1,new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                RESULT = new SymbolAO(-1,d1,t);
                                                                                }else{
                                                                                Integer t = tv.addVariable(new variable(tipoSub.tipoSubBool, tp.getNP()));
                                                                                OperandoC3A op1 = new OperandoC3A("0",TiposOperandoC3A.enteroLit);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,op1,new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                RESULT = new SymbolAO(0,d1,t);
                                                                                }}
                                                                                }
                                                                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AO",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // AO ::= NO ID AOp AO 
            {
              SymbolAO RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolAOp e3 = (SymbolAOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolAO e2 = (SymbolAO)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		descripcion d1 = TS.consultarD(e1);
                                                                                if(d1 == null){
                                                                                System.out.println("ERROR: La variable "+e1+" no ha sido declarada previamente");
                                                                                }else if(d1.tipoS!=tipoSub.tipoSubBool){
                                                                                System.out.println("ERROR: la variable debe de ser booleana");
                                                                                }else{
                                                                                //ESTA VARIABLE SERA EN LA QUE DEJEMOS EL RESULTADO DE LA ® (0=FALS,-1=CERT)
                                                                                Integer t = tv.addVariable(new variable(tipoSub.tipoSubBool, tp.getNP()));
                                                                                //CREAMOS LAS DOS ETIQUETAS PARA CONTROLAR EL VALOR QUE LE DAMOS EN FUNCION DEL RESULTADO DE LA ®
                                                                                String et1 = e.novaET();
                                                                                OperandoC3A desti1 = new OperandoC3A(et1,TiposOperandoC3A.etiqueta);
                                                                                //CREAMOS LOS OPERANDOS CON LOS DOS VALORES A EVALUAR
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                Integer b;
                                                                                if(d1.valorBool == 0){
                                                                                b = -1;
                                                                                op1 = new OperandoC3A("-1",TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                b = 0;
                                                                                op1 = new OperandoC3A("-1",TiposOperandoC3A.enteroLit);
                                                                                }                                                                            
                                                                                op2 = new OperandoC3A(String.valueOf(e2.r),TiposOperandoC3A.enteroLit);     
                                                                                if(e3.and){
                                                                                //AQUI HACEMOS UN AND Y GUARDAMOS EL RESULTADO EN LA VARIABLE TEMPORAL
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.AND,op1,op2,new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                //AQUI ESTAMOS ASIGNANDO A EL.r EL INDEX ASOCIADO A LA VARIABLE BOOLEANA RESULTANTE DE ESTA ®
                                                                                RESULT = new SymbolAO(t,(b&e2.vBool));
                                                                                }else{
                                                                                //AQUI HACEMOS UN OR Y GUARDAMOS EL RESULTADO EN LA VARIABLE TEMPORAL
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.OR,op1,op2,new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                //AQUI ESTAMOS ASIGNANDO A EL.r EL INDEX ASOCIADO A LA VARIABLE BOOLEANA RESULTANTE DE ESTA ®
                                                                                RESULT = new SymbolAO(t,(b|e2.vBool));
                                                                                }
                                                                                }
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AO",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // AO ::= ID 
            {
              SymbolAO RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		descripcion d1 = TS.consultarD(e1);
                                                                                System.out.println("------");
                                                                                if(d1 == null){
                                                                                System.out.println("ERROR: La variable "+e1+" no ha sido declarada previamente");
                                                                                }else{
                                                                                if(d1.tipoS!=tipoSub.tipoSubBool){
                                                                                System.out.println("ERROR: la variable debe de ser booleana");
                                                                                }else{
                                                                                if(d1.valorBool == 0){
                                                                                Integer t = tv.addVariable(new variable(tipoSub.tipoSubBool, tp.getNP()));
                                                                                OperandoC3A op1 = new OperandoC3A("0",TiposOperandoC3A.enteroLit);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,op1,new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                RESULT = new SymbolAO(0,d1,t);
                                                                                }else{
                                                                                Integer t = tv.addVariable(new variable(tipoSub.tipoSubBool, tp.getNP()));
                                                                                OperandoC3A op1 = new OperandoC3A("-1",TiposOperandoC3A.enteroLit);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,op1,new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                RESULT = new SymbolAO(-1,d1,t);
                                                                                }}
                                                                                } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AO",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // AOp ::= AND 
            {
              SymbolAOp RESULT =null;
		
                                                                                RESULT = new SymbolAOp(true);
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AOp",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // AOp ::= OR 
            {
              SymbolAOp RESULT =null;
		
                                                                                RESULT = new SymbolAOp(false);
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AOp",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SortTec ::= ID RPAREN 
            {
              SymbolSortTec RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                                                                                int idx = tv.getIdVariable(e1);
                                                                                variable v=tv.get(idx);
                                                                                OperandoC3A desti;
                                                                                desti = new OperandoC3A(e1,TiposOperandoC3A.parametro);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.PARAM_S,null,null,desti));
                                                                                if(v.tSub==tipoSub.tipoSubBool){
                                                                                desti = new OperandoC3A("imprimeixBooleano",TiposOperandoC3A.procedure);
                                                                                }else{
                                                                                desti = new OperandoC3A("imprimeix",TiposOperandoC3A.procedure);
                                                                                }

                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.CALL,null,null,desti));
                                                                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SortTec",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ENCAP ::= ID LPAREN RPAREN 
            {
              SymbolENCAP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                                                                String et = e.novaET();
                                                                                if(np==0){
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.GOTO,null,null,new OperandoC3A("E_MAIN",TiposOperandoC3A.etiqueta)));
                                                                                }
                                                                                np++;
                                                                                descripcion d = new descripcion(tipoDescripcion.Proc, np, false, new Etiqueta(et));
                                                                                TS.afegir(e1,d);
                                                                                tp.addProcedimiento(new Procedimiento(e1));
                                                                                //TS.entrabloc();รง
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,new OperandoC3A(et,TiposOperandoC3A.etiqueta)));
                                                                                RESULT = new SymbolENCAP(false,e1); 
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENCAP",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ENCAP ::= TE_ARGS1 RPAREN 
            {
              SymbolENCAP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolTE_ARGS1 e1 = (SymbolTE_ARGS1)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                                String et = e.novaET();
                                                                                if(np==0){
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.GOTO,null,null,new OperandoC3A("E_MAIN",TiposOperandoC3A.etiqueta)));
                                                                                }
                                                                                //TS.entrabloc();
                                                                                np++;
                                                                                descripcion d = new descripcion(tipoDescripcion.Proc, np, false, new Etiqueta(et),e1.tArg);
                                                                                TS.afegir(e1.id,d);
                                                                                tp.addProcedimiento(new Procedimiento(e1.id));
                                                                                //TS.entrabloc();ร ง
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,new OperandoC3A(et,TiposOperandoC3A.etiqueta)));
                                                                                RESULT = new SymbolENCAP(true, e1.id);  
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENCAP",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TE_ARGS1 ::= ID LPAREN ENTER ID 
            {
              SymbolTE_ARGS1 RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		                                                                                                                                                                
                                                                                descripcion d2 = TS.consultarD(e2);
                                                                                if(d2 != null && np == d2.np){
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek());                                                                                                                                                                                               
                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e2+"- ya ha sido declarada previamente";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e2+"- ya ha sido declarada previamente");
                                                                                }else{
                                                                                descripcion arg = new descripcion(tipoDescripcion.Arg, np, tipoSub.tipoSubInt);   
                                                                                RESULT = new SymbolTE_ARGS1(e1,0);
                                                                                }
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TE_ARGS1",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TE_ARGS1 ::= TE_ARGS1 COMA ENTER ID 
            {
              SymbolTE_ARGS1 RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolTE_ARGS1 e1 = (SymbolTE_ARGS1)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                descripcion d2 = TS.consultarD(e2);
                                                                                if(d2 != null && np == d2.np){
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek());                                                                                                                                                                                               
                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e2+"- ya ha sido declarada previamente";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e2+"- ya ha sido declarada previamente");
                                                                                }else{
                                                                                descripcion arg = new descripcion(tipoDescripcion.Arg, np, tipoSub.tipoSubInt);
                                                                                descripcion d = TS.consultarD(e1.id);
                                                                               
                                                                                RESULT = new SymbolTE_ARGS1(e1.id,0,e1.tArg); 
                                                                                } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TE_ARGS1",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TE_ARGS1 ::= ID LPAREN BOOL ID 
            {
              SymbolTE_ARGS1 RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		                                                                                
                                                                                descripcion d2 = TS.consultarD(e2);
                                                                                if(d2 != null && np == d2.np){
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek());                                                                                                                                                                                               
                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e2+"- ya ha sido declarada previamente";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e2+"- ya ha sido declarada previamente");
                                                                                }else{
                                                                                descripcion arg = new descripcion(tipoDescripcion.Arg, np, tipoSub.tipoSubBool);
                                                                                
                                                                                RESULT = new SymbolTE_ARGS1(e1,1); 
                                                                                }
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TE_ARGS1",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TE_ARGS1 ::= TE_ARGS1 COMA BOOL ID 
            {
              SymbolTE_ARGS1 RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolTE_ARGS1 e1 = (SymbolTE_ARGS1)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                descripcion d2 = TS.consultarD(e2);
                                                                                if(d2 != null && np == d2.np){
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek());                                                                                                                                                                                               
                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e2+"- ya ha sido declarada previamente";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e2+"- ya ha sido declarada previamente");
                                                                                }else{
                                                                                descripcion arg = new descripcion(tipoDescripcion.Arg, np, tipoSub.tipoSubInt);
                                                                                //TS.posaArgs(e1.id, e2, arg);
                                                                                descripcion d = TS.consultarD(e1.id);
                                                                              
                                                                                RESULT = new SymbolTE_ARGS1(e1.id,1,e1.tArg);
                                                                                }
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TE_ARGS1",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CND ::= SCND P NEWLINE RCLAVE 
            {
              SymbolCND RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolSCND e1 = (SymbolSCND)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolP e2 = (SymbolP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                                                                String e = e1.getEtiqueta().getEtiqueta();
                                                                                OperandoC3A desti = new OperandoC3A(e,TiposOperandoC3A.etiqueta);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti));
                                                                                RESULT = new SymbolCND(); 
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CND",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CND ::= CCND P NEWLINE RCLAVE 
            {
              SymbolCND RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolCCND e1 = (SymbolCCND)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolP e2 = (SymbolP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                                                                OperandoC3A desti = new OperandoC3A(e1.getEtiqueta().getEtiqueta(),TiposOperandoC3A.etiqueta);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti));
                                                                                RESULT = new SymbolCND(); 
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CND",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SCND ::= COND LPAREN EL RPAREN LCLAVE NEWLINE 
            {
              SymbolSCND RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolEL e1 = (SymbolEL)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
                                                                                String et = e.novaET();
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.EQ,new OperandoC3A(String.valueOf(e1.r),TiposOperandoC3A.booleano),
                                                                                new OperandoC3A("0",TiposOperandoC3A.enteroLit),new OperandoC3A(et,TiposOperandoC3A.etiqueta), true));
                                                                                Etiqueta e = new Etiqueta(et);
                                                                                RESULT = new SymbolSCND(e); 
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCND",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SCND ::= COND LPAREN AO RPAREN LCLAVE NEWLINE 
            {
              SymbolSCND RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolAO e1 = (SymbolAO)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
                                                                                String et = e.novaET();
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.EQ,new OperandoC3A(String.valueOf(e1.r),TiposOperandoC3A.booleano),
                                                                                new OperandoC3A("0",TiposOperandoC3A.enteroLit),new OperandoC3A(et,TiposOperandoC3A.etiqueta), true));
                                                                                Etiqueta e = new Etiqueta(et);
                                                                                RESULT = new SymbolSCND(e);
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCND",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CCND ::= SCND P NEWLINE RCLAVE ECOND LCLAVE NEWLINE 
            {
              SymbolCCND RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		SymbolSCND e1 = (SymbolSCND)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		SymbolP e2 = (SymbolP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
                                                                                String efi = e.novaET();
                                                                                OperandoC3A desti1 = new OperandoC3A(efi,TiposOperandoC3A.etiqueta);
                                                                                OperandoC3A desti2 = new OperandoC3A(e1.getEtiqueta().getEtiqueta(),TiposOperandoC3A.etiqueta);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.GOTO,null,null,desti1));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti2));
                                                                                RESULT = new SymbolCCND(new Etiqueta(efi)); 
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CCND",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CASOS ::= CASOS NEWLINE CASn 
            {
              SymbolCasos RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolCASn e2 = (SymbolCASn)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new SymbolCasos(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASOS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CASOS ::= CASn 
            {
              SymbolCasos RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolCASn e2 = (SymbolCASn)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new SymbolCasos(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASOS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CASOS ::= 
            {
              SymbolCasos RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASOS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CASn ::= CAS ELp DOSPUNTS NEWLINE P NEWLINE TALLA PNTCM 
            {
              SymbolCASn RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		SymbolELp v1 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolP e1 = (SymbolP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT= new SymbolCASn(v1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASn",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EL ::= ELp MENOR ELp 
            {
              SymbolEL RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolELp e3 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolELp e4 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                SymbolEL EL = new SymbolEL(ParserSym.MENOR, e3, e4);
                                                                                //ESTA VARIABLE SERA EN LA QUE DEJEMOS EL RESULTADO DE LA ® (0=FALS,-1=CERT)
                                                                                Integer t = tv.addVariable(new variable(tipoSub.tipoSubBool, tp.getNP()));
                                                                                //CREAMOS LAS DOS ETIQUETAS PARA CONTROLAR EL VALOR QUE LE DAMOS EN FUNCION DEL RESULTADO DE LA ®
                                                                                String e1 = e.novaET();
                                                                                String e2 = e.novaET();
                                                                                //CREAMOS LOS DOS OPERANDOS CON LAS POSIBLES ETIQUETAS
                                                                                OperandoC3A desti1 = new OperandoC3A(e1,TiposOperandoC3A.etiqueta);
                                                                                OperandoC3A desti2 = new OperandoC3A(e2,TiposOperandoC3A.etiqueta);
                                                                                //CREAMOS LOS OPERANDOS CON LOS DOS VALORES A EVALUAR
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e3.esLiteral){
                                                                                op1 = new OperandoC3A(String.valueOf(e3.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                op1 = new OperandoC3A(e3.identificador,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e4.esLiteral){
                                                                                op2 = new OperandoC3A(String.valueOf(e4.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                op2 = new OperandoC3A(e4.identificador,TiposOperandoC3A.variable);
                                                                                }
                                                                                //if e3 ® e4 goto desti1 (PREGUNTAR SI ESTA BIEN PLANTEADO, TENGO DUDAS DE SI NOS FALTA EL GOTO AHI)
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.LT,op1,op2,desti1));
                                                                                //t = 0
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A("0",TiposOperandoC3A.enteroLit),new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                //goto desti2
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.GOTO,null,null,desti2));
                                                                                //skip e1
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti1));
                                                                                //t = -1
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A("-1",TiposOperandoC3A.enteroLit),new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                //skip e2
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti2));
                                                                                //AQUI ESTAMOS ASIGNANDO A EL.r EL INDEX ASOCIADO A LA VARIABLE BOOLEANA RESULTANTE DE ESTA ®
                                                                                EL.setR(t);
                                                                                RESULT = EL;
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EL",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EL ::= ELp MAYOR ELp 
            {
              SymbolEL RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolELp e3 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolELp e4 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                SymbolEL EL = new SymbolEL(ParserSym.MAYOR, e3, e4);
                                                                                Integer t = tv.addVariable(new variable(tipoSub.tipoSubBool, tp.getNP()));
                                                                                 System.out.println("-------------------------------------------------------------------------------------0"+tv.obtenUltimaVariable().idVariable);
                                                                                String e1 = e.novaET();
                                                                                String e2 = e.novaET();
                                                                                OperandoC3A desti1 = new OperandoC3A(e1,TiposOperandoC3A.etiqueta);
                                                                                OperandoC3A desti2 = new OperandoC3A(e2,TiposOperandoC3A.etiqueta);
                                                                                //CREAMOS LOS OPERANDOS CON LOS DOS VALORES A EVALUAR
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e3.esLiteral){
                                                                                EL.isLiteral1=true;
                                                                                op1 = new OperandoC3A(String.valueOf(e3.r),TiposOperandoC3A.enteroLit);                                                        
                                                                                }else{
                                                                                EL.isLiteral1=false;
                                                                                op1 = new OperandoC3A(e3.identificador,TiposOperandoC3A.variable);                                                                                 
                                                                                }
                                                                                if(e4.esLiteral){
                                                                                EL.isLiteral2=true;
                                                                                op2 = new OperandoC3A(String.valueOf(e4.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                EL.isLiteral2=false;
                                                                                op2 = new OperandoC3A(e4.identificador,TiposOperandoC3A.variable);
                                                                                }
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.IFGT,op1,op2,desti1));
                                                                                
                                                                                
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A("0",TiposOperandoC3A.enteroLit),new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.GOTO,null,null,desti2));//---------------------------------------------------------------------------------------------------------------------------------------
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti1));                                                                                
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A("-1",TiposOperandoC3A.enteroLit),new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti2));
                                                                                EL.setR(t);
                                                                                RESULT = EL;
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EL",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EL ::= ELp IGUAL IGUAL ELp 
            {
              SymbolEL RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolELp e3 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolELp e4 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                SymbolEL EL = new SymbolEL(ParserSym.IGUAL, e3, e4);
                                                                                Integer t = tv.addVariable(new variable(tipoSub.tipoSubBool, tp.getNP()));
                                                                                String e1 = e.novaET();
                                                                                String e2 = e.novaET();
                                                                                OperandoC3A desti1 = new OperandoC3A(e1,TiposOperandoC3A.etiqueta);
                                                                                OperandoC3A desti2 = new OperandoC3A(e2,TiposOperandoC3A.etiqueta);
                                                                                //CREAMOS LOS OPERANDOS CON LOS DOS VALORES A EVALUAR
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e3.esLiteral){
                                                                                EL.isLiteral1=true;
                                                                                op1 = new OperandoC3A(String.valueOf(e3.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                EL.isLiteral1=false;
                                                                                op1 = new OperandoC3A(e3.identificador,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e4.esLiteral){
                                                                                EL.isLiteral2=true;
                                                                                op2 = new OperandoC3A(String.valueOf(e4.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                EL.isLiteral2=false;
                                                                                op2 = new OperandoC3A(e4.identificador,TiposOperandoC3A.variable);
                                                                                }
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.EQ,op1,op2,desti1));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A("0",TiposOperandoC3A.enteroLit),new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.GOTO,null,null,desti2));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti1));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A("-1",TiposOperandoC3A.enteroLit),new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti2));
                                                                                EL.setR(t);
                                                                                RESULT = EL;
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EL",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EL ::= ELp MAYIG ELp 
            {
              SymbolEL RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolELp e3 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolELp e4 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                SymbolEL EL = new SymbolEL(ParserSym.MAYIG, e3, e4);
                                                                                Integer t = tv.addVariable(new variable(tipoSub.tipoSubBool, tp.getNP()));
                                                                                String e1 = e.novaET();
                                                                                String e2 = e.novaET();
                                                                                OperandoC3A desti1 = new OperandoC3A(e1,TiposOperandoC3A.etiqueta);
                                                                                OperandoC3A desti2 = new OperandoC3A(e2,TiposOperandoC3A.etiqueta);
                                                                                //CREAMOS LOS OPERANDOS CON LOS DOS VALORES A EVALUAR
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e3.esLiteral){
                                                                                EL.isLiteral1=true;
                                                                                op1 = new OperandoC3A(String.valueOf(e3.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                EL.isLiteral1=false;
                                                                                op1 = new OperandoC3A(e3.identificador,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e4.esLiteral){
                                                                                EL.isLiteral2=true;
                                                                                op2 = new OperandoC3A(String.valueOf(e4.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                EL.isLiteral2=false;
                                                                                op2 = new OperandoC3A(e4.identificador,TiposOperandoC3A.variable);
                                                                                }
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.GE,op1,op2,desti1));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A("0",TiposOperandoC3A.enteroLit),new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.GOTO,null,null,desti2));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti1));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A("-1",TiposOperandoC3A.enteroLit),new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti2));
                                                                                EL.setR(t);
                                                                                RESULT = EL;
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EL",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EL ::= ELp MENIG ELp 
            {
              SymbolEL RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolELp e3 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolELp e4 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                SymbolEL EL = new SymbolEL(ParserSym.MENIG, e3, e4);
                                                                                Integer t = tv.addVariable(new variable(tipoSub.tipoSubBool, tp.getNP()));
                                                                                String e1 = e.novaET();
                                                                                String e2 = e.novaET();
                                                                                OperandoC3A desti1 = new OperandoC3A(e1,TiposOperandoC3A.etiqueta);
                                                                                OperandoC3A desti2 = new OperandoC3A(e2,TiposOperandoC3A.etiqueta);
                                                                                //CREAMOS LOS OPERANDOS CON LOS DOS VALORES A EVALUAR
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e3.esLiteral){
                                                                                EL.isLiteral1=true;
                                                                                op1 = new OperandoC3A(String.valueOf(e3.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                EL.isLiteral1=false;
                                                                                op1 = new OperandoC3A(e3.identificador,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e4.esLiteral){
                                                                                EL.isLiteral2=true;
                                                                                op2 = new OperandoC3A(String.valueOf(e4.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                EL.isLiteral2=false;
                                                                                op2 = new OperandoC3A(e4.identificador,TiposOperandoC3A.variable);
                                                                                }
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.LE,op1,op2,desti1));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A("0",TiposOperandoC3A.enteroLit),new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.GOTO,null,null,desti2));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti1));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A("-1",TiposOperandoC3A.enteroLit),new OperandoC3A(tv.obtenUltimaVariable().idVariable,TiposOperandoC3A.variable)));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti2));
                                                                                EL.setR(t);
                                                                                RESULT = EL;
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EL",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENTS ::= ENTER ID IGUAL ELp ADD ELp PNTCM 
            {
              SymbolSENTS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolELp e5 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolELp e6 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolSENTS(ParserSym.ADD, e5, e6,e1); 
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubInt);
                                                                                TS.afegir(e1,d);
                                                                                int t= tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                //TENER EN CUENTA QUE AQUI HABRIA QUE COMPROBAR SI REALMENTE ES UNA VARIABLE O UN LITERAL
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e5.esLiteral){
                                                                                op1 = new OperandoC3A(String.valueOf(e5.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e5.identificador);
                                                                                variable v1 = tv.get(idx);
                                                                                op1 = new OperandoC3A(v1.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e6.esLiteral){
                                                                                op2 = new OperandoC3A(String.valueOf(e6.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e6.identificador);
                                                                                variable v2 = tv.get(idx);
                                                                                op2 = new OperandoC3A(v2.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                OperandoC3A desti = new OperandoC3A(e1,TiposOperandoC3A.variable);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.ADD,op1,op2,desti));
                                                                                //ME FALTA VER QUE HACER CON SENTS.r SI ES NECESARIO HABRA QUE DARLE VALOR
                                                                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTS ::= ENTER ID IGUAL ELp MUL ELp PNTCM 
            {
              SymbolSENTS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolELp e5 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolELp e6 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolSENTS(ParserSym.MUL, e5, e6,e1);
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubInt);
                                                                                TS.afegir(e1,d);
                                                                                int t= tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e5.esLiteral){
                                                                                op1 = new OperandoC3A(String.valueOf(e5.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e5.identificador);
                                                                                variable v1 = tv.get(idx);
                                                                                op1 = new OperandoC3A(v1.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e6.esLiteral){
                                                                                op2 = new OperandoC3A(String.valueOf(e6.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e6.identificador);
                                                                                variable v2 = tv.get(idx);
                                                                                op2 = new OperandoC3A(v2.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                OperandoC3A desti = new OperandoC3A(e1,TiposOperandoC3A.variable);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.MUL,op1,op2,desti));
                                                                                //ME FALTA VER QUE HACER CON SENTS.r SI ES NECESARIO HABRA QUE DARLE VALOR
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENTS ::= ENTER ID IGUAL ELp DIV ELp PNTCM 
            {
              SymbolSENTS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolELp e5 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolELp e6 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolSENTS(ParserSym.DIV, e5, e6,e1); 
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubInt);
                                                                                TS.afegir(e1,d);
                                                                                int t= tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e5.esLiteral){
                                                                                op1 = new OperandoC3A(String.valueOf(e5.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e5.identificador);
                                                                                variable v1 = tv.get(idx);
                                                                                op1 = new OperandoC3A(v1.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e6.esLiteral){
                                                                                op2 = new OperandoC3A(String.valueOf(e6.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e6.identificador);
                                                                                variable v2 = tv.get(idx);
                                                                                op2 = new OperandoC3A(v2.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                OperandoC3A desti = new OperandoC3A(e1,TiposOperandoC3A.variable);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.DIV,op1,op2,desti));
                                                                                //ME FALTA VER QUE HACER CON SENTS.r SI ES NECESARIO HABRA QUE DARLE VALOR
                                                                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENTS ::= ENTER ID IGUAL ELp MOD ELp PNTCM 
            {
              SymbolSENTS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolELp e5 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolELp e6 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolSENTS(ParserSym.MOD, e5, e6,e1);
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubInt);
                                                                                TS.afegir(e1,d);
                                                                                int t= tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e5.esLiteral){
                                                                                op1 = new OperandoC3A(String.valueOf(e5.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e5.identificador);
                                                                                variable v1 = tv.get(idx);
                                                                                op1 = new OperandoC3A(v1.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e6.esLiteral){
                                                                                op2 = new OperandoC3A(String.valueOf(e6.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e6.identificador);
                                                                                variable v2 = tv.get(idx);
                                                                                op2 = new OperandoC3A(v2.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                OperandoC3A desti = new OperandoC3A(e1,TiposOperandoC3A.variable);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.MOD,op1,op2,desti));
                                                                                //ME FALTA VER QUE HACER CON SENTS.r SI ES NECESARIO HABRA QUE DARLE VALOR
                                                                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENTS ::= ENTER ID IGUAL ELp SUB ELp PNTCM 
            {
              SymbolSENTS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolELp e5 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolELp e6 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolSENTS(ParserSym.SUB, e5, e6,e1); 
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubInt);
                                                                                TS.afegir(e1,d);
                                                                                int t= tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e5.esLiteral){
                                                                                op1 = new OperandoC3A(String.valueOf(e5.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e5.identificador);
                                                                                variable v1 = tv.get(idx);
                                                                                op1 = new OperandoC3A(v1.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e6.esLiteral){
                                                                                op2 = new OperandoC3A(String.valueOf(e6.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e6.identificador);
                                                                                variable v2 = tv.get(idx);
                                                                                op2 = new OperandoC3A(v2.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                OperandoC3A desti = new OperandoC3A(e1,TiposOperandoC3A.variable);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SUB,op1,op2,desti));
                                                                                //ME FALTA VER QUE HACER CON SENTS.r SI ES NECESARIO HABRA QUE DARLE VALOR
                                                                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SENTS ::= ID IGUAL ELp ADD ELp PNTCM 
            {
              SymbolSENTS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolELp e5 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolELp e6 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolSENTS(ParserSym.ADD, e5, e6,e1);
                                                                                int t= tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e5.esLiteral){
                                                                                op1 = new OperandoC3A(String.valueOf(e5.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e5.identificador);
                                                                                variable v1 = tv.get(idx);
                                                                                op1 = new OperandoC3A(v1.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e6.esLiteral){
                                                                                op2 = new OperandoC3A(String.valueOf(e6.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e6.identificador);
                                                                                variable v2 = tv.get(idx);
                                                                                op2 = new OperandoC3A(v2.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                OperandoC3A desti = new OperandoC3A(e1,TiposOperandoC3A.variable);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.ADD,op1,op2,desti));
                                                                                //ME FALTA VER QUE HACER CON SENTS.r SI ES NECESARIO HABRA QUE DARLE VALOR
                                                                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENTS ::= ID IGUAL ELp MUL ELp PNTCM 
            {
              SymbolSENTS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolELp e5 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolELp e6 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolSENTS(ParserSym.MUL, e5, e6,e1);
                                                                                int t= tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e5.esLiteral){
                                                                                op1 = new OperandoC3A(String.valueOf(e5.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e5.identificador);
                                                                                variable v1 = tv.get(idx);
                                                                                op1 = new OperandoC3A(v1.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e6.esLiteral){
                                                                                op2 = new OperandoC3A(String.valueOf(e6.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e6.identificador);
                                                                                variable v2 = tv.get(idx);
                                                                                op2 = new OperandoC3A(v2.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                OperandoC3A desti = new OperandoC3A(e1,TiposOperandoC3A.variable);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.MUL,op1,op2,desti));
                                                                                //ME FALTA VER QUE HACER CON SENTS.r SI ES NECESARIO HABRA QUE DARLE VALOR
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENTS ::= ID IGUAL ELp DIV ELp PNTCM 
            {
              SymbolSENTS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolELp e5 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolELp e6 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolSENTS(ParserSym.DIV, e5, e6,e1); 
                                                                                int t= tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e5.esLiteral){
                                                                                op1 = new OperandoC3A(String.valueOf(e5.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e5.identificador);
                                                                                variable v1 = tv.get(idx);
                                                                                op1 = new OperandoC3A(v1.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e6.esLiteral){
                                                                                op2 = new OperandoC3A(String.valueOf(e6.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e6.identificador);
                                                                                variable v2 = tv.get(idx);
                                                                                op2 = new OperandoC3A(v2.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                OperandoC3A desti = new OperandoC3A(e1,TiposOperandoC3A.variable);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.DIV,op1,op2,desti));
                                                                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTS ::= ID IGUAL ELp MOD ELp PNTCM 
            {
              SymbolSENTS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolELp e5 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolELp e6 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolSENTS(ParserSym.MOD, e5, e6,e1);
                                                                                int t= tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e5.esLiteral){
                                                                                op1 = new OperandoC3A(String.valueOf(e5.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e5.identificador);
                                                                                variable v1 = tv.get(idx);
                                                                                op1 = new OperandoC3A(v1.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e6.esLiteral){
                                                                                op2 = new OperandoC3A(String.valueOf(e6.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e6.identificador);
                                                                                variable v2 = tv.get(idx);
                                                                                op2 = new OperandoC3A(v2.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                OperandoC3A desti = new OperandoC3A(e1,TiposOperandoC3A.variable);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.MOD,op1,op2,desti));
                                                                                //ME FALTA VER QUE HACER CON SENTS.r SI ES NECESARIO HABRA QUE DARLE VALOR
                                                                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTS ::= ID IGUAL ELp SUB ELp PNTCM 
            {
              SymbolSENTS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolELp e5 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolELp e6 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolSENTS(ParserSym.SUB, e5, e6,e1); 
                                                                                int t= tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e5.esLiteral){
                                                                                op1 = new OperandoC3A(String.valueOf(e5.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e5.identificador);
                                                                                variable v1 = tv.get(idx);
                                                                                op1 = new OperandoC3A(v1.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e6.esLiteral){
                                                                                op2 = new OperandoC3A(String.valueOf(e6.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e6.identificador);
                                                                                variable v2 = tv.get(idx);
                                                                                op2 = new OperandoC3A(v2.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                OperandoC3A desti = new OperandoC3A(e1,TiposOperandoC3A.variable);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SUB,op1,op2,desti));
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ELp ::= numero 
            {
              SymbolELp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                                                                RESULT = new SymbolELp(Integer.parseInt(v), true);
                                                                                //tengo que revisar como lo hacemos con los literales
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ELp ::= ENTER ID IGUAL numero PNTCM 
            {
              SymbolELp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubInt);
                                                                                TS.afegir(e1,d);                                                                                   
                                                                                int t= tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                 //TiposInstruccionC3A instruccion, OperandoC3A param1, OperandoC3A param2, OperandoC3A destino
                                                                                RESULT = new SymbolELp(t);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A(v,TiposOperandoC3A.enteroLit),new OperandoC3A(e1,TiposOperandoC3A.variable)));
                                                                                
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ELp ::= ENTER ID IGUAL SUB numero PNTCM 
            {
              SymbolELp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubInt);
                                                                                TS.afegir(e1,d);
                                                                                int t= tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                 //TiposInstruccionC3A instruccion, OperandoC3A param1, OperandoC3A param2, OperandoC3A destino
                                                                                RESULT = new SymbolELp(t);
                                                                                String s = "-"+v;
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A(s,TiposOperandoC3A.enteroLit),new OperandoC3A(e1,TiposOperandoC3A.variable)));
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ELp ::= SUB numero 
            {
              SymbolELp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                                                                String s = "-"+v;
                                                                                RESULT = new SymbolELp(Integer.parseInt(s), true);
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ELp ::= ENTER ID IGUAL ID PNTCM 
            {
              SymbolELp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubInt);
                                                                                TS.afegir(e1,d);
                                                                                descripcion d2 = TS.consultarD(e2);
                                                                                if(d2 == null){
                                                                                //generar codigo error 68k
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1));
                                                                                er.causaError= "ERROR en la linea:"+cs2.xleft.getLine()+" La variable -"+e2+"- no ha sido declarada previamente";                                                                                
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea:"+cs2.xleft.getLine()+"  La variable -"+e2+"- no ha sido declarada previamente");                                                                                
                                                                                }else if(d2.tipoS != tipoSub.tipoSubInt){      
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1));
                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": no coinciden los tipos -"+e1+"- con -"+e2+"- ";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": no coinciden los tipos -"+e1+"- con -"+e2+"- ");
                                                                                }
                                                                                int t= tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                 //TiposInstruccionC3A instruccion, OperandoC3A param1, OperandoC3A param2, OperandoC3A destino
                                                                                RESULT = new SymbolELp(t);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A(e2,TiposOperandoC3A.variable),new OperandoC3A(e1,TiposOperandoC3A.variable)));
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ELp ::= ENTER ID PNTCM 
            {
              SymbolELp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubInt);
                                                                                TS.afegir(e1,d);
                                                                                tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ELp ::= ID 
            {
              SymbolELp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                                                                int id = tv.getIdVariable(e1);
                                                                                if(id == -1){    
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1));
                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e1+"- no ha sido declarada previamente";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e1+"- no ha sido declarada previamente");
                                                                                }else{
                                                                                RESULT = new SymbolELp(e1);
                                                                                }
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ELp ::= CONST ID IGUAL VBOOL PNTCM 
            {
              SymbolELp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ELp ::= ENTER ID IGUAL CRIDAS 
            {
              SymbolELp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolCRIDAS e2 = (SymbolCRIDAS)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EB ::= BOOL ID IGUAL VBOOL PNTCM 
            {
              SymbolEB RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                                descripcion d1 = TS.consultarD(e1);
                                                                                if(d1 != null){
                                                                                System.out.println("ERROR: La variable "+e1+" ya ha sido declarada previamente");
                                                                                er.causaError= "ERROR: La variable "+e1+" ya ha sido declarada previamente";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR: La variable -"+e1+"- ya ha sido declarada previamente");
                                                                                }else{
                                                                                tv.addVariable(new variable(e1,tipoSub.tipoSubBool, tp.getNP()));
                                                                                descripcion d;
                                                                                if("cert".equals(e2)){
                                                                                d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubBool,-1);
                                                                                }else{        
                                                                                d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubBool,0);
                                                                                }
                                                                                TS.afegir(e1,d);
                                                                                if("fals".equals(e2)){
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A("0",TiposOperandoC3A.enteroLit),new OperandoC3A(e1,TiposOperandoC3A.variable)));
                                                                                }
                                                                                if("cert".equals(e2)){
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A("-1",TiposOperandoC3A.enteroLit),new OperandoC3A(e1,TiposOperandoC3A.variable)));
                                                                                }
                                                                                } 
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EB",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EB ::= BOOL ID PNTCM 
            {
              SymbolEB RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubBool);
                                                                                TS.afegir(e1,d);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EB",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EB ::= ID IGUAL VBOOL PNTCM 
            {
              SymbolEB RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                                descripcion d1 = TS.consultarD(e1);
                                                                                if(d1 == null){
                                                                               // System.out.println("ERROR: La variable -"+e1+"- no ha sido declarada previamente");
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3));
                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e1+"- no ha sido declarada previamente";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e1+"- no ha sido declarada previamente");
                                                                                }else{
                                                                                if(d1.tipoS!=tipoSub.tipoSubBool){
                                                                                //System.out.println("ERROR: la variable debe de ser booleana");
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3));
                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e1+"-  debe de ser booleana";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e1+"-  debe de ser booleana");
                                                                                }else{
                                                                                if(e2 == "cert"){
                                                                                d1.valorBool = -1;
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A("-1",TiposOperandoC3A.enteroLit),new OperandoC3A(e1,TiposOperandoC3A.variable)));
                                                                                }else{        
                                                                                d1.valorBool = 0;
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A("0",TiposOperandoC3A.enteroLit),new OperandoC3A(e1,TiposOperandoC3A.variable)));
                                                                                }
                                                                                } 
                                                                                }
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EB",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EB ::= ID IGUAL EL PNTCM 
            {
              SymbolEB RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolEL e2 = (SymbolEL)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                                descripcion d1 = TS.consultarD(e1);
                                                                                if(d1 == null){
                                                                                //System.out.println("ERROR: La variable "+e1+" no ha sido declarada previamente");
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3));
                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e1+"- no ha sido declarada previamente";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e1+"- no ha sido declarada previamente");
                                                                                }else{
                                                                                if(d1.tipoS!=tipoSub.tipoSubBool){
                                                                                //System.out.println("ERROR: La variable debe de ser booleana");
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3));
                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e1+"- debe de ser booleana";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e1+"- debe de ser booleana");
                                                                                } }
                                                                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EB",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EB ::= BOOL ID IGUAL EL PNTCM 
            {
              SymbolEB RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolEL e2 = (SymbolEL)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubBool);
                                                                                TS.afegir(e1,d);
                                                                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EB",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EB ::= ID IGUAL numero PNTCM 
            {
              SymbolEB RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                                descripcion d1 = TS.consultarD(e1);
                                                                                if(d1 == null){
                                                                                //System.out.println("ERROR: La variable "+e1+" no ha sido declarada previamente");
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3));
                                                                                
                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e1+"- no ha sido declarada previamente";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e1+"- no ha sido declarada previamente");

                                                                                }else if(d1.tipoS!=tipoSub.tipoSubInt){
                                                                                //System.out.println("ERROR: la variable debe de ser un ENTERO");
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3));
                                                                                
                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e1+"- la variable debe de ser un ENTERO";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e1+"- la variable debe de ser un ENTERO");
                                                                                }else{
                                                                                int id = tv.getIdVariable(e1);
                                                                                variable v1 = tv.get(id);
                                                                                OperandoC3A op2 = new OperandoC3A(v,TiposOperandoC3A.enteroLit);
                                                                                OperandoC3A desti = new OperandoC3A(v1.idVariable,TiposOperandoC3A.variable);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,op2,desti));
                                                                                }
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EB",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EB ::= ID IGUAL ID PNTCM 
            {
              SymbolEB RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 descripcion d1 = TS.consultarD(e1);
                                                                                descripcion d2 = TS.consultarD(e2);
                                                                                 if(d1 == null){
                                                                                System.out.println("ERROR: La variable "+e1+" no ha sido declarada previamente");
                                                                                }else if(d2 == null){
                                                                                System.out.println("ERROR: La variable "+e1+" no ha sido declarada previamente");
                                                                                }else if(d1.tipoS != d2.tipoS){
                                                                                System.out.println("ERROR NO COINCIDEN LOS TIPOS");
                                                                                report_error("No coinciden los tipos \""+e2+"\"", new SymbolEB());
                                                                                }
                                                                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EB",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EB ::= BOOL ID IGUAL CRIDAS 
            {
              SymbolEB RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolCRIDAS e2 = (SymbolCRIDAS)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EB",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EB ::= BOOL ID IGUAL ID PNTCM 
            {
              SymbolEB RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubInt);
                                                                                TS.afegir(e1,d);
                                                                                descripcion d2 = TS.consultarD(e2);
                                                                                if(d2 == null){
                                                                                //generar codigo error 68k
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3));

                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e2+"- no ha sido declarada previamente";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": La variable -"+e2+"- no ha sido declarada previamente");                                                                                
                                                                                }else if(d2.tipoS != tipoSub.tipoSubInt){  
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3));

                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": no coinciden los tipos -"+e1+"- con -"+e2+"- ";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": no coinciden los tipos -"+e1+"- con -"+e2+"- ");
                                                                                }
                                                                                int t= tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                 //TiposInstruccionC3A instruccion, OperandoC3A param1, OperandoC3A param2, OperandoC3A destino
                                                                                RESULT = new SymbolEB();
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,null,new OperandoC3A(e2,TiposOperandoC3A.variable),new OperandoC3A(e1,TiposOperandoC3A.variable)));
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EB",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // RetInstr ::= RETORNA ID PNTCM 
            {
              SymbolRetInstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 descripcion d1 = TS.consultarD(e1);
                                                                                if(d1 == null){
                                                                                //System.out.println("ERROR: La variable "+e1+" no ha sido declarada previamente");
                                                                                ComplexSymbol cs2 = (ComplexSymbol) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3));
                                                                                
                                                                                er.causaError= "ERROR en la linea "+cs2.xleft.getLine()+": La variable "+e1+" no ha sido declarada previamente";
                                                                                GeneraEnsablador e= new GeneraEnsablador(); 
                                                                                e.generaError68k();
                                                                                RESULT = new SymbolRetInstr();
                                                                                throw new RuntimeException("ERROR en la linea "+cs2.xleft.getLine()+": La variable "+e1+" no ha sido declarada previamente");
                                                                                
                                                                                }else{
                                                                                if(d1.tipoS == tipoSub.tipoSubBool){
                                                                                RESULT = new SymbolRetInstr(true);
                                                                                }else{
                                                                                RESULT = new SymbolRetInstr(false);
                                                                                Procedimiento p = tp.removeProcedimiento();
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.GOTO,null,null,new OperandoC3A(p.idProcedimiento, TiposOperandoC3A.etiqueta)));
                                                                                }
                                                                                }
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RetInstr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // RetInstr ::= RETORNA numero PNTCM 
            {
              SymbolRetInstr RESULT =null;
		 RESULT = new SymbolRetInstr(false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RetInstr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // RetInstr ::= RETORNA VBOOL PNTCM 
            {
              SymbolRetInstr RESULT =null;
		 RESULT = new SymbolRetInstr(false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RetInstr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
