
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compilador.sintactic;

import java_cup.runtime.*;
import compilador.sintactic.symbols.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\121\000\002\002\004\000\002\002\012\000\002\020" +
    "\004\000\002\020\020\000\002\020\020\000\002\020\016" +
    "\000\002\020\004\000\002\030\002\000\002\031\002\000" +
    "\002\003\003\000\002\003\005\000\002\003\002\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\013\000\002\004\003\000\002\004\003" +
    "\000\002\004\004\000\002\004\011\000\002\004\006\000" +
    "\002\022\006\000\002\023\007\000\002\023\011\000\002" +
    "\024\004\000\002\026\005\000\002\026\004\000\002\026" +
    "\006\000\002\026\003\000\002\027\003\000\002\027\003" +
    "\000\002\021\004\000\002\016\006\000\002\017\004\000" +
    "\002\017\006\000\002\017\005\000\002\017\006\000\002" +
    "\017\005\000\002\017\005\000\002\017\003\000\002\005" +
    "\006\000\002\005\006\000\002\006\010\000\002\006\010" +
    "\000\002\007\011\000\002\013\005\000\002\013\003\000" +
    "\002\013\002\000\002\014\012\000\002\010\005\000\002" +
    "\010\005\000\002\010\006\000\002\010\005\000\002\010" +
    "\005\000\002\012\011\000\002\012\011\000\002\012\011" +
    "\000\002\012\011\000\002\012\011\000\002\012\010\000" +
    "\002\012\010\000\002\012\010\000\002\012\010\000\002" +
    "\012\010\000\002\011\003\000\002\011\007\000\002\011" +
    "\007\000\002\011\005\000\002\011\003\000\002\011\007" +
    "\000\002\015\007\000\002\015\005\000\002\015\006\000" +
    "\002\015\006\000\002\015\007\000\002\015\006\000\002" +
    "\015\006\000\002\025\005\000\002\025\005\000\002\025" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\367\000\004\026\005\001\002\000\004\002\371\001" +
    "\002\000\004\007\006\001\002\000\004\010\007\001\002" +
    "\000\004\014\010\001\002\000\004\025\011\001\002\000" +
    "\030\004\033\015\023\016\026\025\ufff6\033\030\035\034" +
    "\036\032\040\037\042\016\050\017\051\022\001\002\000" +
    "\004\025\ufff0\001\002\000\030\004\033\015\023\016\026" +
    "\025\ufff6\033\030\035\034\036\032\040\037\042\016\050" +
    "\017\051\022\001\002\000\030\004\033\015\023\016\026" +
    "\025\ufff6\033\030\035\034\036\032\040\037\042\016\050" +
    "\017\051\022\001\002\000\004\025\ufff5\001\002\000\004" +
    "\007\356\001\002\000\024\010\uffc0\011\uffc0\012\uffc0\013" +
    "\uffc0\025\uffc0\027\uffc0\030\uffc0\032\uffc0\034\uffc0\001\002" +
    "\000\004\025\274\001\002\000\004\025\ufff3\001\002\000" +
    "\010\007\222\013\221\025\uffbc\001\002\000\004\051\171" +
    "\001\002\000\004\025\uffef\001\002\000\004\025\ufff2\001" +
    "\002\000\004\007\147\001\002\000\030\004\033\015\023" +
    "\016\026\025\ufff6\033\030\035\034\036\032\040\037\042" +
    "\016\050\017\051\022\001\002\000\004\007\130\001\002" +
    "\000\004\025\ufff4\001\002\000\004\051\124\001\002\000" +
    "\004\007\101\001\002\000\004\051\072\001\002\000\004" +
    "\025\ufff8\001\002\000\012\015\044\036\032\050\017\051" +
    "\041\001\002\000\004\032\040\001\002\000\004\025\uffee" +
    "\001\002\000\022\010\uffbc\011\uffbc\012\uffbc\013\uffbc\027" +
    "\uffbc\030\uffbc\032\uffbc\034\uffbc\001\002\000\014\011\061" +
    "\012\063\013\057\027\062\030\060\001\002\000\004\010" +
    "\054\001\002\000\004\051\045\001\002\000\006\013\046" +
    "\032\047\001\002\000\006\050\051\051\050\001\002\000" +
    "\036\005\uffbd\006\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd" +
    "\022\uffbd\023\uffbd\024\uffbd\025\uffbd\027\uffbd\030\uffbd\032" +
    "\uffbd\034\uffbd\001\002\000\004\032\053\001\002\000\004" +
    "\032\052\001\002\000\036\005\uffbf\006\uffbf\010\uffbf\011" +
    "\uffbf\012\uffbf\013\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf" +
    "\027\uffbf\030\uffbf\032\uffbf\034\uffbf\001\002\000\036\005" +
    "\uffbe\006\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe\022\uffbe" +
    "\023\uffbe\024\uffbe\025\uffbe\027\uffbe\030\uffbe\032\uffbe\034" +
    "\uffbe\001\002\000\004\014\055\001\002\000\004\025\056" +
    "\001\002\000\030\004\uffea\015\uffea\016\uffea\025\uffea\033" +
    "\uffea\035\uffea\036\uffea\040\uffea\042\uffea\050\uffea\051\uffea" +
    "\001\002\000\004\013\070\001\002\000\012\015\044\036" +
    "\032\050\017\051\041\001\002\000\012\015\044\036\032" +
    "\050\017\051\041\001\002\000\012\015\044\036\032\050" +
    "\017\051\041\001\002\000\012\015\044\036\032\050\017" +
    "\051\041\001\002\000\006\010\uffce\032\uffce\001\002\000" +
    "\006\010\uffcc\032\uffcc\001\002\000\006\010\uffcf\032\uffcf" +
    "\001\002\000\006\010\uffcb\032\uffcb\001\002\000\012\015" +
    "\044\036\032\050\017\051\041\001\002\000\006\010\uffcd" +
    "\032\uffcd\001\002\000\006\013\073\032\074\001\002\000" +
    "\014\015\044\036\032\050\017\051\041\052\076\001\002" +
    "\000\004\025\uffb9\001\002\000\004\032\100\001\002\000" +
    "\004\032\077\001\002\000\004\025\uffba\001\002\000\004" +
    "\025\uffb6\001\002\000\014\015\044\036\032\043\105\050" +
    "\017\051\102\001\002\000\022\010\uffe4\011\uffbc\012\uffbc" +
    "\013\uffbc\027\uffbc\030\uffbc\046\107\047\111\001\002\000" +
    "\004\010\121\001\002\000\004\010\116\001\002\000\004" +
    "\051\106\001\002\000\010\010\uffe6\046\107\047\111\001" +
    "\002\000\006\043\uffe3\051\uffe3\001\002\000\006\043\105" +
    "\051\112\001\002\000\006\043\uffe2\051\uffe2\001\002\000" +
    "\010\010\uffe4\046\107\047\111\001\002\000\004\010\uffe5" +
    "\001\002\000\006\043\105\051\112\001\002\000\004\010" +
    "\uffe7\001\002\000\004\014\117\001\002\000\004\025\120" +
    "\001\002\000\030\004\uffd5\015\uffd5\016\uffd5\025\uffd5\033" +
    "\uffd5\035\uffd5\036\uffd5\040\uffd5\042\uffd5\050\uffd5\051\uffd5" +
    "\001\002\000\004\014\122\001\002\000\004\025\123\001" +
    "\002\000\030\004\uffd6\015\uffd6\016\uffd6\025\uffd6\033\uffd6" +
    "\035\uffd6\036\uffd6\040\uffd6\042\uffd6\050\uffd6\051\uffd6\001" +
    "\002\000\004\013\125\001\002\000\004\052\126\001\002" +
    "\000\004\032\127\001\002\000\036\005\uffbb\006\uffbb\010" +
    "\uffbb\011\uffbb\012\uffbb\013\uffbb\022\uffbb\023\uffbb\024\uffbb" +
    "\025\uffbb\027\uffbb\030\uffbb\032\uffbb\034\uffbb\001\002\000" +
    "\014\015\uffe8\033\132\036\uffe8\050\uffe8\051\uffe8\001\002" +
    "\000\006\043\105\051\112\001\002\000\004\007\133\001" +
    "\002\000\006\043\uffe8\051\uffe8\001\002\000\004\010\135" +
    "\001\002\000\004\014\136\001\002\000\004\025\137\001" +
    "\002\000\030\004\uffe9\015\uffe9\016\uffe9\025\uffe9\033\uffe9" +
    "\035\uffe9\036\uffe9\040\uffe9\042\uffe9\050\uffe9\051\uffe9\001" +
    "\002\000\004\025\141\001\002\000\030\004\033\015\023" +
    "\016\026\021\142\033\030\035\034\036\032\040\037\042" +
    "\016\050\017\051\022\001\002\000\006\025\uffd8\031\144" +
    "\001\002\000\004\025\ufff7\001\002\000\004\014\145\001" +
    "\002\000\004\025\146\001\002\000\030\004\uffd4\015\uffd4" +
    "\016\uffd4\025\uffd4\033\uffd4\035\uffd4\036\uffd4\040\uffd4\042" +
    "\uffd4\050\uffd4\051\uffd4\001\002\000\004\051\150\001\002" +
    "\000\004\010\151\001\002\000\004\014\152\001\002\000" +
    "\004\025\153\001\002\000\006\017\156\025\uffd1\001\002" +
    "\000\004\025\uffd2\001\002\000\004\025\166\001\002\000" +
    "\012\015\044\036\032\050\017\051\041\001\002\000\004" +
    "\034\160\001\002\000\004\025\161\001\002\000\030\004" +
    "\033\015\023\016\026\025\ufff6\033\030\035\034\036\032" +
    "\040\037\042\016\050\017\051\022\001\002\000\004\025" +
    "\163\001\002\000\030\004\033\015\023\016\026\020\164" +
    "\033\030\035\034\036\032\040\037\042\016\050\017\051" +
    "\022\001\002\000\004\032\165\001\002\000\004\025\uffd0" +
    "\001\002\000\006\017\156\021\170\001\002\000\004\025" +
    "\uffd3\001\002\000\004\025\ufff1\001\002\000\006\013\172" +
    "\032\047\001\002\000\014\015\044\036\032\041\176\050" +
    "\174\051\173\001\002\000\016\005\uffbc\006\uffbc\022\uffbc" +
    "\023\uffbc\024\uffbc\032\053\001\002\000\016\005\uffc0\006" +
    "\uffc0\022\uffc0\023\uffc0\024\uffc0\032\052\001\002\000\014" +
    "\005\204\006\203\022\206\023\205\024\202\001\002\000" +
    "\004\007\177\001\002\000\004\010\200\001\002\000\004" +
    "\032\201\001\002\000\004\025\uffed\001\002\000\012\015" +
    "\044\036\032\050\017\051\041\001\002\000\012\015\044" +
    "\036\032\050\017\051\041\001\002\000\012\015\044\036" +
    "\032\050\017\051\041\001\002\000\012\015\044\036\032" +
    "\050\017\051\041\001\002\000\012\015\044\036\032\050" +
    "\017\051\041\001\002\000\004\032\210\001\002\000\004" +
    "\025\uffc8\001\002\000\004\032\212\001\002\000\004\025" +
    "\uffc9\001\002\000\004\032\214\001\002\000\004\025\uffca" +
    "\001\002\000\004\032\216\001\002\000\004\025\uffc6\001" +
    "\002\000\004\032\220\001\002\000\004\025\uffc7\001\002" +
    "\000\014\015\044\036\032\050\245\051\244\052\250\001" +
    "\002\000\012\010\224\015\227\035\225\051\223\001\002" +
    "\000\006\010\242\037\241\001\002\000\006\014\uffd9\032" +
    "\uffd9\001\002\000\004\051\235\001\002\000\004\032\234" +
    "\001\002\000\004\051\230\001\002\000\006\010\232\037" +
    "\231\001\002\000\012\010\224\015\227\035\225\051\223" +
    "\001\002\000\006\014\uffdd\032\uffdd\001\002\000\006\014" +
    "\uffde\032\uffde\001\002\000\004\025\uffe0\001\002\000\006" +
    "\010\237\037\236\001\002\000\012\010\224\015\227\035" +
    "\225\051\223\001\002\000\006\014\uffdb\032\uffdb\001\002" +
    "\000\006\014\uffdc\032\uffdc\001\002\000\012\010\224\015" +
    "\227\035\225\051\223\001\002\000\006\014\uffdf\032\uffdf" +
    "\001\002\000\006\014\uffda\032\uffda\001\002\000\030\005" +
    "\uffbc\006\uffbc\011\uffbc\012\uffbc\013\uffbc\022\uffbc\023\uffbc" +
    "\024\uffbc\027\uffbc\030\uffbc\032\273\001\002\000\030\005" +
    "\uffc0\006\uffc0\011\uffc0\012\uffc0\013\uffc0\022\uffc0\023\uffc0" +
    "\024\uffc0\027\uffc0\030\uffc0\032\272\001\002\000\026\005" +
    "\254\006\255\011\061\012\063\013\057\022\256\023\257" +
    "\024\253\027\062\030\060\001\002\000\004\032\252\001" +
    "\002\000\004\032\251\001\002\000\004\025\uffb8\001\002" +
    "\000\004\025\uffb7\001\002\000\012\015\044\036\032\050" +
    "\017\051\041\001\002\000\012\015\044\036\032\050\017" +
    "\051\041\001\002\000\012\015\044\036\032\050\017\051" +
    "\041\001\002\000\012\015\044\036\032\050\017\051\041" +
    "\001\002\000\012\015\044\036\032\050\017\051\041\001" +
    "\002\000\004\032\261\001\002\000\004\025\uffc4\001\002" +
    "\000\004\032\263\001\002\000\004\025\uffc3\001\002\000" +
    "\004\032\265\001\002\000\004\025\uffc1\001\002\000\004" +
    "\032\267\001\002\000\004\025\uffc5\001\002\000\004\032" +
    "\271\001\002\000\004\025\uffc2\001\002\000\004\025\uffb5" +
    "\001\002\000\004\025\uffb4\001\002\000\032\004\033\015" +
    "\023\016\026\021\276\025\277\033\030\035\034\036\032" +
    "\040\037\042\016\050\017\051\022\001\002\000\004\002" +
    "\000\001\002\000\006\021\276\025\355\001\002\000\010" +
    "\015\301\035\300\044\302\001\002\000\004\051\340\001" +
    "\002\000\004\051\315\001\002\000\004\051\303\001\002" +
    "\000\004\007\304\001\002\000\012\010\224\015\227\035" +
    "\225\051\223\001\002\000\004\014\306\001\002\000\004" +
    "\025\307\001\002\000\030\004\ufffa\015\ufffa\016\ufffa\025" +
    "\ufffa\033\ufffa\035\ufffa\036\ufffa\040\ufffa\042\ufffa\050\ufffa" +
    "\051\ufffa\001\002\000\030\004\033\015\023\016\026\025" +
    "\ufff6\033\030\035\034\036\032\040\037\042\016\050\017" +
    "\051\022\001\002\000\004\025\312\001\002\000\032\004" +
    "\033\015\023\016\026\021\ufff9\025\ufff9\033\030\035\034" +
    "\036\032\040\037\042\016\050\017\051\022\001\002\000" +
    "\006\021\276\025\277\001\002\000\004\002\ufffc\001\002" +
    "\000\004\007\316\001\002\000\012\010\224\015\227\035" +
    "\225\051\223\001\002\000\004\014\320\001\002\000\004" +
    "\025\321\001\002\000\030\004\ufffa\015\ufffa\016\ufffa\025" +
    "\ufffa\033\ufffa\035\ufffa\036\ufffa\040\ufffa\042\ufffa\050\ufffa" +
    "\051\ufffa\001\002\000\030\004\033\015\023\016\026\025" +
    "\ufff6\033\030\035\034\036\032\040\037\042\016\050\017" +
    "\051\022\001\002\000\004\025\324\001\002\000\030\004" +
    "\033\015\023\016\026\033\030\035\034\036\032\040\037" +
    "\042\016\045\325\050\017\051\022\001\002\000\010\050" +
    "\333\051\332\052\334\001\002\000\004\025\ufff9\001\002" +
    "\000\004\025\330\001\002\000\006\021\276\025\277\001" +
    "\002\000\004\002\ufffe\001\002\000\004\032\337\001\002" +
    "\000\004\032\336\001\002\000\004\032\335\001\002\000" +
    "\004\025\uffb1\001\002\000\004\025\uffb2\001\002\000\004" +
    "\025\uffb3\001\002\000\004\007\341\001\002\000\012\010" +
    "\224\015\227\035\225\051\223\001\002\000\004\014\343" +
    "\001\002\000\004\025\344\001\002\000\030\004\ufffa\015" +
    "\ufffa\016\ufffa\025\ufffa\033\ufffa\035\ufffa\036\ufffa\040\ufffa" +
    "\042\ufffa\050\ufffa\051\ufffa\001\002\000\030\004\033\015" +
    "\023\016\026\025\ufff6\033\030\035\034\036\032\040\037" +
    "\042\016\050\017\051\022\001\002\000\004\025\347\001" +
    "\002\000\030\004\033\015\023\016\026\033\030\035\034" +
    "\036\032\040\037\042\016\045\325\050\017\051\022\001" +
    "\002\000\004\025\ufff9\001\002\000\004\025\352\001\002" +
    "\000\006\021\276\025\277\001\002\000\004\002\ufffd\001" +
    "\002\000\004\002\ufffb\001\002\000\012\002\uffff\015\301" +
    "\035\300\044\302\001\002\000\004\051\357\001\002\000" +
    "\004\010\362\001\002\000\004\032\361\001\002\000\004" +
    "\025\uffec\001\002\000\004\032\uffe1\001\002\000\004\025" +
    "\364\001\002\000\030\004\033\015\023\016\026\021\365" +
    "\033\030\035\034\036\032\040\037\042\016\050\017\051" +
    "\022\001\002\000\004\025\uffeb\001\002\000\004\025\367" +
    "\001\002\000\030\004\033\015\023\016\026\021\370\033" +
    "\030\035\034\036\032\040\037\042\016\050\017\051\022" +
    "\001\002\000\004\025\uffd7\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\367\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\003\017\004\034\005\014\006\026\007" +
    "\012\011\030\012\024\015\011\016\023\022\020\023\013" +
    "\024\035\001\001\000\002\001\001\000\032\003\365\004" +
    "\034\005\014\006\026\007\012\011\030\012\024\015\011" +
    "\016\023\022\020\023\013\024\035\001\001\000\032\003" +
    "\362\004\034\005\014\006\026\007\012\011\030\012\024" +
    "\015\011\016\023\022\020\023\013\024\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\003\137\004\034\005\014\006\026\007\012\011" +
    "\030\012\024\015\011\016\023\022\020\023\013\024\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\042\011\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\066\001\001\000\004\011\065\001\001\000\004\011" +
    "\064\001\001\000\004\011\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\074\011\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\102\011\041\026\103\001\001\000" +
    "\004\027\113\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\107\001\001\000\002\001" +
    "\001\000\004\026\112\001\001\000\002\001\001\000\004" +
    "\027\113\001\001\000\002\001\001\000\004\026\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\130\001\001\000" +
    "\004\026\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\004\142\005\014" +
    "\006\026\007\012\011\030\012\024\015\011\016\023\022" +
    "\020\023\013\024\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\154\014\153\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\156\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\003\161\004" +
    "\034\005\014\006\026\007\012\011\030\012\024\015\011" +
    "\016\023\022\020\023\013\024\035\001\001\000\002\001" +
    "\001\000\030\004\142\005\014\006\026\007\012\011\030" +
    "\012\024\015\011\016\023\022\020\023\013\024\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\174\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\216" +
    "\001\001\000\004\011\214\001\001\000\004\011\212\001" +
    "\001\000\004\011\210\001\001\000\004\011\206\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\246\011\245\001\001\000\004\017\225" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\232\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\237" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\242\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\267\001\001\000\004\011\265\001\001\000" +
    "\004\011\263\001\001\000\004\011\261\001\001\000\004" +
    "\011\257\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\004\142\005\014\006\026\007\012\011\030\012" +
    "\024\015\011\016\023\020\274\022\020\023\013\024\035" +
    "\001\001\000\002\001\001\000\004\020\353\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\304\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\307\001\001" +
    "\000\032\003\310\004\034\005\014\006\026\007\012\011" +
    "\030\012\024\015\011\016\023\022\020\023\013\024\035" +
    "\001\001\000\002\001\001\000\032\004\142\005\014\006" +
    "\026\007\012\011\030\012\024\015\011\016\023\022\020" +
    "\023\013\024\035\031\312\001\001\000\004\020\313\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\316" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\321\001\001\000\032\003\322\004\034\005\014\006\026" +
    "\007\012\011\030\012\024\015\011\016\023\022\020\023" +
    "\013\024\035\001\001\000\002\001\001\000\032\004\142" +
    "\005\014\006\026\007\012\011\030\012\024\015\011\016" +
    "\023\022\020\023\013\024\035\025\325\001\001\000\002" +
    "\001\001\000\004\031\326\001\001\000\002\001\001\000" +
    "\004\020\330\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\341\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\344\001\001\000\032\003\345\004\034\005\014" +
    "\006\026\007\012\011\030\012\024\015\011\016\023\022" +
    "\020\023\013\024\035\001\001\000\002\001\001\000\032" +
    "\004\142\005\014\006\026\007\012\011\030\012\024\015" +
    "\011\016\023\022\020\023\013\024\035\025\347\001\001" +
    "\000\004\031\350\001\001\000\002\001\001\000\004\020" +
    "\352\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\357\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\004\142\005\014\006\026\007\012\011" +
    "\030\012\024\015\011\016\023\022\020\023\013\024\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\004" +
    "\142\005\014\006\026\007\012\011\030\012\024\015\011" +
    "\016\023\022\020\023\013\024\035\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

 TablaVariables tv = new TablaVariables(); TABLASIMBOLOS TS = new TABLASIMBOLOS(); TablaProcedimientos tp = new TablaProcedimientos(); Codi3A c3a = new Codi3A(); Etiqueta e = new Etiqueta(); 
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= I EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolI start_val = (SymbolI)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // I ::= MAIN LPAREN RPAREN LCLAVE NEWLINE P NEWLINE SUBP 
            {
              SymbolI RESULT =null;
		 RESULT = new SymbolI();
                                                                                c3a.imprimeC3A();
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SUBP ::= RCLAVE NEWLINE 
            {
              SymbolSubP RESULT =null;
		 RESULT = new SymbolSubP();                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBP",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SUBP ::= NEWLINE ENTER ID LPAREN ARGS1 LCLAVE NEWLINE ENTRAB P NEWLINE RetInstr SURTB NEWLINE SUBP 
            {
              SymbolSubP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		SymbolENTRAB e4 = (SymbolENTRAB)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolRetInstr e3 = (SymbolRetInstr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new SymbolSubP();
                                                                                                                if(e3.esBool){
                                                                                                                System.out.println("ERROR: DEBE DEVOLVER ENTERO");
                                                                                                                }
                                                                                                                descripcion d = new descripcion(tipoDescripcion.Funcio, tipoSub.tipoSubInt);
                                                                                                                TS.afegir(e1,d);
                                                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBP",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SUBP ::= NEWLINE BOOL ID LPAREN ARGS1 LCLAVE NEWLINE ENTRAB P NEWLINE RetInstr SURTB NEWLINE SUBP 
            {
              SymbolSubP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		SymbolENTRAB e4 = (SymbolENTRAB)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolRetInstr e3 = (SymbolRetInstr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		         RESULT = new SymbolSubP(); 
                                                                                                                if(!e3.esBool){
                                                                                                                System.out.println("ERROR: DEBE DEVOLVER BOOLEANO");
                                                                                                                }
                                                                                                                descripcion d = new descripcion(tipoDescripcion.Funcio, tipoSub.tipoSubBool);
                                                                                                                TS.afegir(e1,d);
                                                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBP",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SUBP ::= NEWLINE VOID ID LPAREN ARGS1 LCLAVE NEWLINE ENTRAB P NEWLINE SURTB SUBP 
            {
              SymbolSubP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymbolENTRAB e4 = (SymbolENTRAB)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		  RESULT = new SymbolSubP();
                                                                                                                descripcion d = new descripcion(tipoDescripcion.Funcio, tipoSub.tipoSubInt);
                                                                                                                 TS.afegir(e1,d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBP",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SUBP ::= RCLAVE SUBP 
            {
              SymbolSubP RESULT =null;
		 RESULT = new SymbolSubP();                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUBP",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ENTRAB ::= 
            {
              SymbolENTRAB RESULT =null;
		 TS.entrabloc(); RESULT = new SymbolENTRAB(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENTRAB",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SURTB ::= 
            {
              SymbolSURTB RESULT =null;
		 TS.surtbloc(); RESULT = new SymbolSURTB(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SURTB",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // P ::= instr 
            {
              SymbolP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Symbolinstr e1 = (Symbolinstr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolP(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // P ::= P NEWLINE instr 
            {
              SymbolP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Symbolinstr e1 = (Symbolinstr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolP(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // P ::= 
            {
              SymbolP RESULT =null;
		 RESULT = new SymbolP(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instr ::= CND 
            {
              Symbolinstr RESULT =null;
		 RESULT = new Symbolinstr(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instr ::= ELp 
            {
              Symbolinstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolELp e1 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Symbolinstr(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instr ::= M 
            {
              Symbolinstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolM e1 = (SymbolM)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Symbolinstr(); 
                                                                                //TS.entrabloc();
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instr ::= SENTS 
            {
              Symbolinstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolSENTS e1 = (SymbolSENTS)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Symbolinstr(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instr ::= ELIGEIX LPAREN ID RPAREN LCLAVE NEWLINE CASOS NEWLINE RCLAVE 
            {
              Symbolinstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolCasos e2 = (SymbolCasos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Symbolinstr(); 
                                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instr ::= EB 
            {
              Symbolinstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolEB e1 = (SymbolEB)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instr ::= ARGS 
            {
              Symbolinstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolArgs e1 = (SymbolArgs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instr ::= NULL PNTCM 
            {
              Symbolinstr RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instr ::= ENTER ID IGUAL LECT LPAREN RPAREN PNTCM 
            {
              Symbolinstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		 System.out.println("Reconoce LECTURATECLADO"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instr ::= SORT LPAREN SortTec PNTCM 
            {
              Symbolinstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolSortTec e1 = (SymbolSortTec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 System.out.println("Reconoce SALIDAPANTALLA"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // M ::= CM P NEWLINE RCLAVE 
            {
              SymbolM RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolCM e1 = (SymbolCM)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolP e2 = (SymbolP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new SymbolM(); 
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.GOTO,null,null,new OperandoC3A(e1.ei.getEtiqueta(),TiposOperandoC3A.etiqueta)));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,new OperandoC3A(e1.efi.getEtiqueta(),TiposOperandoC3A.etiqueta)));
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CM ::= Mm EL RPAREN LCLAVE NEWLINE 
            {
              SymbolCM RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymbolMm e2 = (SymbolMm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolEL e1 = (SymbolEL)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
                                                                                String efi = e.novaET();
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.EQ,new OperandoC3A(String.valueOf(e1.r),TiposOperandoC3A.booleano),
                                                                                new OperandoC3A("0",TiposOperandoC3A.enteroLit),new OperandoC3A(efi,TiposOperandoC3A.etiqueta)));
                                                                                Etiqueta e = new Etiqueta(efi);
                                                                                RESULT = new SymbolCM(e,e2.ei);
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CM",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CM ::= MENTRES LPAREN Mm AO RPAREN LCLAVE NEWLINE 
            {
              SymbolCM RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymbolMm e1 = (SymbolMm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolAO e2 = (SymbolAO)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
                                                                                //LO MISMO QUE CON EL CONDICIONAL, TENGO QUE  
                                                                                //HABLAR CON PERE A VER COMO PODRIAMOS HACER ESTO
                                                                   
                                                                                RESULT = new SymbolCM();
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CM",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Mm ::= MENTRES LPAREN 
            {
              SymbolMm RESULT =null;
		
                                                                                String ei = e.novaET();
                                                                                OperandoC3A desti = new OperandoC3A(ei,TiposOperandoC3A.etiqueta);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti));
                                                                                RESULT = new SymbolMm(new Etiqueta(ei));
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Mm",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // AO ::= ID AOp AO 
            {
              SymbolAO RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 descripcion d1 = TS.consultarD(e1);
                                                                                if(d1 == null){
                                                                                System.out.println("ERROR: La variable "+e1+" no ha sido declarada previamente");
                                                                                }else if(d1.tipoS!=tipoSub.tipoSubBool){
                                                                                System.out.println("ERROR: la variable debe de ser booleana");
                                                                                }else{
                                                                                int idx = tv.getIdVariable(e1);
                                                                                variable v = tv.get(idx);
                                                                                }
                                                                                //LA MOVIDA AQUI ES, COMO SACO EL VALOR BOOLEANO FINAL DE ESTO
                                                                                //ES DECIR COMO PUEDO SACAR EL VALOR FINAL DE TODA LA EXPRESION BOOLEANA                                                                                }
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AO",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // AO ::= NO ID 
            {
              SymbolAO RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 descripcion d1 = TS.consultarD(e1);
                                                                                if(d1 == null){
                                                                                System.out.println("ERROR: La variable "+e1+" no ha sido declarada previamente");
                                                                                }else{
                                                                                if(d1.tipoS!=tipoSub.tipoSubBool){
                                                                                System.out.println("ERROR: la variable debe de ser booleana");
                                                                                }}  
                                                                                RESULT = new SymbolAO(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AO",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // AO ::= NO ID AOp AO 
            {
              SymbolAO RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 descripcion d1 = TS.consultarD(e1);
                                                                                if(d1 == null){
                                                                                System.out.println("ERROR: La variable "+e1+" no ha sido declarada previamente");
                                                                                }else{
                                                                                if(d1.tipoS!=tipoSub.tipoSubBool){
                                                                                System.out.println("ERROR: la variable debe de ser booleana");
                                                                                }} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AO",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // AO ::= ID 
            {
              SymbolAO RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		descripcion d1 = TS.consultarD(e1);
                                                                                if(d1 == null){
                                                                                System.out.println("ERROR: La variable "+e1+" no ha sido declarada previamente");
                                                                                }else{
                                                                                if(d1.tipoS!=tipoSub.tipoSubBool){
                                                                                System.out.println("ERROR: la variable debe de ser booleana");
                                                                                }} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AO",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // AOp ::= AND 
            {
              SymbolAOp RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AOp",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // AOp ::= OR 
            {
              SymbolAOp RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AOp",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SortTec ::= ID RPAREN 
            {
              SymbolSortTec RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SortTec",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ARGS ::= ID LPAREN ARGS1 PNTCM 
            {
              SymbolArgs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ARGS1 ::= ID RPAREN 
            {
              SymbolArgs1 RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS1",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ARGS1 ::= ENTER ID COMA ARGS1 
            {
              SymbolArgs1 RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS1",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ARGS1 ::= ENTER ID RPAREN 
            {
              SymbolArgs1 RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS1",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ARGS1 ::= BOOL ID COMA ARGS1 
            {
              SymbolArgs1 RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS1",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ARGS1 ::= BOOL ID RPAREN 
            {
              SymbolArgs1 RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS1",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ARGS1 ::= ID COMA ARGS1 
            {
              SymbolArgs1 RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS1",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ARGS1 ::= RPAREN 
            {
              SymbolArgs1 RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS1",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CND ::= SCND P NEWLINE RCLAVE 
            {
              SymbolCND RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolSCND e1 = (SymbolSCND)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolP e2 = (SymbolP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                                                                String e = e1.getEtiqueta().getEtiqueta();
                                                                                OperandoC3A desti = new OperandoC3A(e,TiposOperandoC3A.etiqueta);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti));
                                                                                RESULT = new SymbolCND(); 
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CND",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CND ::= CCND P NEWLINE RCLAVE 
            {
              SymbolCND RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolCCND e1 = (SymbolCCND)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolP e2 = (SymbolP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                                                                OperandoC3A desti = new OperandoC3A(e1.getEtiqueta().getEtiqueta(),TiposOperandoC3A.etiqueta);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti));
                                                                                RESULT = new SymbolCND(); 
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CND",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SCND ::= COND LPAREN EL RPAREN LCLAVE NEWLINE 
            {
              SymbolSCND RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolEL e1 = (SymbolEL)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
                                                                                String et = e.novaET();
                                                                                //AQUI TENDRE EL VALOR DEL INDICE QUE OCUPA ESA VARIABLE EN LA TV, ¿BASTA CON ESO PARA CREAR EL OPERANDO?
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.EQ,new OperandoC3A(String.valueOf(e1.r),TiposOperandoC3A.booleano),
                                                                                new OperandoC3A("0",TiposOperandoC3A.enteroLit),new OperandoC3A(et,TiposOperandoC3A.etiqueta)));
                                                                                Etiqueta e = new Etiqueta(et);
                                                                                RESULT = new SymbolSCND(e); 
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCND",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SCND ::= COND LPAREN AO RPAREN LCLAVE NEWLINE 
            {
              SymbolSCND RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolAO e1 = (SymbolAO)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
                                                                                String et = e.novaET();
                                                                                //AQUI TENDRE EL VALOR DEL INDICE QUE OCUPA ESA VARIABLE EN LA TV, ¿BASTA CON ESO PARA CREAR EL OPERANDO?
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.EQ,new OperandoC3A(String.valueOf(e1.r),TiposOperandoC3A.booleano),
                                                                                new OperandoC3A("0",TiposOperandoC3A.enteroLit),new OperandoC3A(et,TiposOperandoC3A.etiqueta)));
                                                                                Etiqueta e = new Etiqueta(et);
                                                                                RESULT = new SymbolSCND(e);
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCND",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CCND ::= SCND P NEWLINE RCLAVE ECOND LCLAVE NEWLINE 
            {
              SymbolCCND RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		SymbolSCND e1 = (SymbolSCND)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		SymbolP e2 = (SymbolP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
                                                                                String efi = e.novaET();
                                                                                OperandoC3A desti1 = new OperandoC3A(efi,TiposOperandoC3A.etiqueta);
                                                                                OperandoC3A desti2 = new OperandoC3A(e1.getEtiqueta().getEtiqueta(),TiposOperandoC3A.etiqueta);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.GOTO,null,null,desti1));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti2));
                                                                                RESULT = new SymbolCCND(new Etiqueta(efi)); 
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CCND",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CASOS ::= CASOS NEWLINE CASn 
            {
              SymbolCasos RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolCASn e2 = (SymbolCASn)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new SymbolCasos(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASOS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CASOS ::= CASn 
            {
              SymbolCasos RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolCASn e2 = (SymbolCASn)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new SymbolCasos(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASOS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CASOS ::= 
            {
              SymbolCasos RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASOS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CASn ::= CAS ELp DOSPUNTS NEWLINE P NEWLINE TALLA PNTCM 
            {
              SymbolCASn RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		SymbolELp v1 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolP e1 = (SymbolP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT= new SymbolCASn(v1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASn",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EL ::= ELp MENOR ELp 
            {
              SymbolEL RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolELp e3 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolELp e4 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                //ESTO LO DEJO ASI, DE FORMA PROVISIONAL PORQUE YA ESTABA ASI
                                                                                SymbolEL EL = new SymbolEL(ParserSym.MENOR, e3, e4);
                                                                                //ESTA VARIABLE SERA EN LA QUE DEJEMOS EL RESULTADO DE LA ® (0=FALS,-1=CERT)
                                                                                Integer t = tv.addVariable(new variable(tipoSub.tipoSubBool, tp.getNP()));
                                                                                //CREAMOS LAS DOS ETIQUETAS PARA CONTROLAR EL VALOR QUE LE DAMOS EN FUNCION DEL RESULTADO DE LA ®
                                                                                String e1 = e.novaET();
                                                                                String e2 = e.novaET();
                                                                                //CREAMOS LOS DOS OPERANDOS CON LAS POSIBLES ETIQUETAS
                                                                                OperandoC3A desti1 = new OperandoC3A(e1,TiposOperandoC3A.etiqueta);
                                                                                OperandoC3A desti2 = new OperandoC3A(e2,TiposOperandoC3A.etiqueta);
                                                                                //CREAMOS LOS OPERANDOS CON LOS DOS VALORES A EVALUAR
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e3.esLiteral){
                                                                                op1 = new OperandoC3A(String.valueOf(e3.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                op1 = new OperandoC3A(e3.identificador,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e4.esLiteral){
                                                                                op2 = new OperandoC3A(String.valueOf(e4.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                op2 = new OperandoC3A(e4.identificador,TiposOperandoC3A.variable);
                                                                                }
                                                                                //if e3 ® e4 goto desti1 (PREGUNTAR SI ESTA BIEN PLANTEADO, TENGO DUDAS DE SI NOS FALTA EL GOTO AHI)
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.LT,op1,op2,desti1));
                                                                                //t = 0
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,new OperandoC3A("0",TiposOperandoC3A.enteroLit),null,new OperandoC3A(String.valueOf(t),TiposOperandoC3A.variable)));
                                                                                //goto desti2
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.GOTO,null,null,desti2));
                                                                                //skip e1
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti1));
                                                                                //t = -1
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,new OperandoC3A("-1",TiposOperandoC3A.enteroLit),null,new OperandoC3A(String.valueOf(t),TiposOperandoC3A.variable)));
                                                                                //skip e2
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti2));
                                                                                //AQUI ESTAMOS ASIGNANDO A EL.r EL INDEX ASOCIADO A LA VARIABLE BOOLEANA RESULTANTE DE ESTA ®
                                                                                EL.setR(t);
                                                                                RESULT = EL;
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EL",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EL ::= ELp MAYOR ELp 
            {
              SymbolEL RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolELp e3 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolELp e4 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                SymbolEL EL = new SymbolEL(ParserSym.MAYOR, e3, e4);
                                                                                Integer t = tv.addVariable(new variable(tipoSub.tipoSubBool, tp.getNP()));
                                                                                String e1 = e.novaET();
                                                                                String e2 = e.novaET();
                                                                                OperandoC3A desti1 = new OperandoC3A(e1,TiposOperandoC3A.etiqueta);
                                                                                OperandoC3A desti2 = new OperandoC3A(e2,TiposOperandoC3A.etiqueta);
                                                                                //CREAMOS LOS OPERANDOS CON LOS DOS VALORES A EVALUAR
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e3.esLiteral){
                                                                                op1 = new OperandoC3A(String.valueOf(e3.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                op1 = new OperandoC3A(e3.identificador,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e4.esLiteral){
                                                                                op2 = new OperandoC3A(String.valueOf(e4.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                op2 = new OperandoC3A(e4.identificador,TiposOperandoC3A.variable);
                                                                                }
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.GT,op1,op2,desti1));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,new OperandoC3A("0",TiposOperandoC3A.enteroLit),null,new OperandoC3A(String.valueOf(t),TiposOperandoC3A.variable)));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.GOTO,null,null,desti2));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti1));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,new OperandoC3A("-1",TiposOperandoC3A.enteroLit),null,new OperandoC3A(String.valueOf(t),TiposOperandoC3A.variable)));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti2));
                                                                                EL.setR(t);
                                                                                RESULT = EL;
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EL",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EL ::= ELp IGUAL IGUAL ELp 
            {
              SymbolEL RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolELp e3 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolELp e4 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                SymbolEL EL = new SymbolEL(ParserSym.IGUAL, e3, e4);
                                                                                Integer t = tv.addVariable(new variable(tipoSub.tipoSubBool, tp.getNP()));
                                                                                String e1 = e.novaET();
                                                                                String e2 = e.novaET();
                                                                                OperandoC3A desti1 = new OperandoC3A(e1,TiposOperandoC3A.etiqueta);
                                                                                OperandoC3A desti2 = new OperandoC3A(e2,TiposOperandoC3A.etiqueta);
                                                                                //CREAMOS LOS OPERANDOS CON LOS DOS VALORES A EVALUAR
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e3.esLiteral){
                                                                                op1 = new OperandoC3A(String.valueOf(e3.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                op1 = new OperandoC3A(e3.identificador,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e4.esLiteral){
                                                                                op2 = new OperandoC3A(String.valueOf(e4.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                op2 = new OperandoC3A(e4.identificador,TiposOperandoC3A.variable);
                                                                                }
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.EQ,op1,op2,desti1));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,new OperandoC3A("0",TiposOperandoC3A.enteroLit),null,new OperandoC3A(String.valueOf(t),TiposOperandoC3A.variable)));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.GOTO,null,null,desti2));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti1));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,new OperandoC3A("-1",TiposOperandoC3A.enteroLit),null,new OperandoC3A(String.valueOf(t),TiposOperandoC3A.variable)));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti2));
                                                                                EL.setR(t);
                                                                                RESULT = EL;
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EL",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EL ::= ELp MAYIG ELp 
            {
              SymbolEL RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolELp e3 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolELp e4 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                SymbolEL EL = new SymbolEL(ParserSym.MAYIG, e3, e4);
                                                                                Integer t = tv.addVariable(new variable(tipoSub.tipoSubBool, tp.getNP()));
                                                                                String e1 = e.novaET();
                                                                                String e2 = e.novaET();
                                                                                OperandoC3A desti1 = new OperandoC3A(e1,TiposOperandoC3A.etiqueta);
                                                                                OperandoC3A desti2 = new OperandoC3A(e2,TiposOperandoC3A.etiqueta);
                                                                                //CREAMOS LOS OPERANDOS CON LOS DOS VALORES A EVALUAR
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e3.esLiteral){
                                                                                op1 = new OperandoC3A(String.valueOf(e3.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                op1 = new OperandoC3A(e3.identificador,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e4.esLiteral){
                                                                                op2 = new OperandoC3A(String.valueOf(e4.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                op2 = new OperandoC3A(e4.identificador,TiposOperandoC3A.variable);
                                                                                }
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.GE,op1,op2,desti1));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,new OperandoC3A("0",TiposOperandoC3A.enteroLit),null,new OperandoC3A(String.valueOf(t),TiposOperandoC3A.variable)));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.GOTO,null,null,desti2));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti1));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,new OperandoC3A("-1",TiposOperandoC3A.enteroLit),null,new OperandoC3A(String.valueOf(t),TiposOperandoC3A.variable)));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti2));
                                                                                EL.setR(t);
                                                                                RESULT = EL;
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EL",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EL ::= ELp MENIG ELp 
            {
              SymbolEL RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolELp e3 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolELp e4 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                SymbolEL EL = new SymbolEL(ParserSym.MENIG, e3, e4);
                                                                                Integer t = tv.addVariable(new variable(tipoSub.tipoSubBool, tp.getNP()));
                                                                                String e1 = e.novaET();
                                                                                String e2 = e.novaET();
                                                                                OperandoC3A desti1 = new OperandoC3A(e1,TiposOperandoC3A.etiqueta);
                                                                                OperandoC3A desti2 = new OperandoC3A(e2,TiposOperandoC3A.etiqueta);
                                                                                //CREAMOS LOS OPERANDOS CON LOS DOS VALORES A EVALUAR
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e3.esLiteral){
                                                                                op1 = new OperandoC3A(String.valueOf(e3.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                op1 = new OperandoC3A(e3.identificador,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e4.esLiteral){
                                                                                op2 = new OperandoC3A(String.valueOf(e4.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                op2 = new OperandoC3A(e4.identificador,TiposOperandoC3A.variable);
                                                                                }
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.LE,op1,op2,desti1));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,new OperandoC3A("0",TiposOperandoC3A.enteroLit),null,new OperandoC3A(String.valueOf(t),TiposOperandoC3A.variable)));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.GOTO,null,null,desti2));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti1));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.COPY,new OperandoC3A("-1",TiposOperandoC3A.enteroLit),null,new OperandoC3A(String.valueOf(t),TiposOperandoC3A.variable)));
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SKIP,null,null,desti2));
                                                                                EL.setR(t);
                                                                                RESULT = EL;
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EL",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTS ::= ENTER ID IGUAL ELp ADD ELp PNTCM 
            {
              SymbolSENTS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolELp e5 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolELp e6 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolSENTS(ParserSym.ADD, e5, e6,e1); 
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubInt);
                                                                                TS.afegir(e1,d);
                                                                                int t= tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                //TENER EN CUENTA QUE AQUI HABRIA QUE COMPROBAR SI REALMENTE ES UNA VARIABLE O UN LITERAL
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e5.esLiteral){
                                                                                op1 = new OperandoC3A(String.valueOf(e5.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                variable v1 = tv.get(e5.r);
                                                                                op1 = new OperandoC3A(v1.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e6.esLiteral){
                                                                                op2 = new OperandoC3A(String.valueOf(e6.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                variable v2 = tv.get(e6.r);
                                                                                op2 = new OperandoC3A(v2.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                OperandoC3A desti = new OperandoC3A(e1,TiposOperandoC3A.variable);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.ADD,op1,op2,desti));
                                                                                //ME FALTA VER QUE HACER CON SENTS.r SI ES NECESARIO HABRA QUE DARLE VALOR
                                                                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTS ::= ENTER ID IGUAL ELp MUL ELp PNTCM 
            {
              SymbolSENTS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolELp e5 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolELp e6 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolSENTS(ParserSym.MUL, e5, e6,e1);
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubInt);
                                                                                TS.afegir(e1,d);
                                                                                int t= tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e5.esLiteral){
                                                                                op1 = new OperandoC3A(String.valueOf(e5.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                variable v1 = tv.get(e5.r);
                                                                                op1 = new OperandoC3A(v1.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e6.esLiteral){
                                                                                op2 = new OperandoC3A(String.valueOf(e6.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                variable v2 = tv.get(e6.r);
                                                                                op2 = new OperandoC3A(v2.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                OperandoC3A desti = new OperandoC3A(e1,TiposOperandoC3A.variable);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.MUL,op1,op2,desti));
                                                                                //ME FALTA VER QUE HACER CON SENTS.r SI ES NECESARIO HABRA QUE DARLE VALOR
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTS ::= ENTER ID IGUAL ELp DIV ELp PNTCM 
            {
              SymbolSENTS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolELp e5 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolELp e6 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolSENTS(ParserSym.DIV, e5, e6,e1); 
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubInt);
                                                                                TS.afegir(e1,d);
                                                                                int t= tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e5.esLiteral){
                                                                                op1 = new OperandoC3A(String.valueOf(e5.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                variable v1 = tv.get(e5.r);
                                                                                op1 = new OperandoC3A(v1.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e6.esLiteral){
                                                                                op2 = new OperandoC3A(String.valueOf(e6.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                variable v2 = tv.get(e6.r);
                                                                                op2 = new OperandoC3A(v2.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                OperandoC3A desti = new OperandoC3A(e1,TiposOperandoC3A.variable);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.DIV,op1,op2,desti));
                                                                                //ME FALTA VER QUE HACER CON SENTS.r SI ES NECESARIO HABRA QUE DARLE VALOR
                                                                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENTS ::= ENTER ID IGUAL ELp MOD ELp PNTCM 
            {
              SymbolSENTS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolELp e5 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolELp e6 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolSENTS(ParserSym.MOD, e5, e6,e1);
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubInt);
                                                                                TS.afegir(e1,d);
                                                                                int t= tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e5.esLiteral){
                                                                                op1 = new OperandoC3A(String.valueOf(e5.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                variable v1 = tv.get(e5.r);
                                                                                op1 = new OperandoC3A(v1.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e6.esLiteral){
                                                                                op2 = new OperandoC3A(String.valueOf(e6.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                variable v2 = tv.get(e6.r);
                                                                                op2 = new OperandoC3A(v2.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                OperandoC3A desti = new OperandoC3A(e1,TiposOperandoC3A.variable);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.MOD,op1,op2,desti));
                                                                                //ME FALTA VER QUE HACER CON SENTS.r SI ES NECESARIO HABRA QUE DARLE VALOR
                                                                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENTS ::= ENTER ID IGUAL ELp SUB ELp PNTCM 
            {
              SymbolSENTS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolELp e5 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolELp e6 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolSENTS(ParserSym.SUB, e5, e6,e1); 
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubInt);
                                                                                TS.afegir(e1,d);
                                                                                int t= tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e5.esLiteral){
                                                                                op1 = new OperandoC3A(String.valueOf(e5.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                variable v1 = tv.get(e5.r);
                                                                                op1 = new OperandoC3A(v1.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e6.esLiteral){
                                                                                op2 = new OperandoC3A(String.valueOf(e6.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                variable v2 = tv.get(e6.r);
                                                                                op2 = new OperandoC3A(v2.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                OperandoC3A desti = new OperandoC3A(e1,TiposOperandoC3A.variable);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SUB,op1,op2,desti));
                                                                                //ME FALTA VER QUE HACER CON SENTS.r SI ES NECESARIO HABRA QUE DARLE VALOR
                                                                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTS ::= ID IGUAL ELp ADD ELp PNTCM 
            {
              SymbolSENTS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolELp e5 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolELp e6 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolSENTS(ParserSym.ADD, e5, e6,e1);
                                                                                int t= tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e5.esLiteral){
                                                                                op1 = new OperandoC3A(String.valueOf(e5.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                variable v1 = tv.get(e5.r);
                                                                                op1 = new OperandoC3A(v1.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e6.esLiteral){
                                                                                op2 = new OperandoC3A(String.valueOf(e6.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                variable v2 = tv.get(e6.r);
                                                                                op2 = new OperandoC3A(v2.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                OperandoC3A desti = new OperandoC3A(e1,TiposOperandoC3A.variable);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.ADD,op1,op2,desti));
                                                                                //ME FALTA VER QUE HACER CON SENTS.r SI ES NECESARIO HABRA QUE DARLE VALOR
                                                                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENTS ::= ID IGUAL ELp MUL ELp PNTCM 
            {
              SymbolSENTS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolELp e5 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolELp e6 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolSENTS(ParserSym.MUL, e5, e6,e1);
                                                                                int t= tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e5.esLiteral){
                                                                                op1 = new OperandoC3A(String.valueOf(e5.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                variable v1 = tv.get(e5.r);
                                                                                op1 = new OperandoC3A(v1.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e6.esLiteral){
                                                                                op2 = new OperandoC3A(String.valueOf(e6.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                variable v2 = tv.get(e6.r);
                                                                                op2 = new OperandoC3A(v2.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                OperandoC3A desti = new OperandoC3A(e1,TiposOperandoC3A.variable);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.MUL,op1,op2,desti));
                                                                                //ME FALTA VER QUE HACER CON SENTS.r SI ES NECESARIO HABRA QUE DARLE VALOR
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENTS ::= ID IGUAL ELp DIV ELp PNTCM 
            {
              SymbolSENTS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolELp e5 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolELp e6 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolSENTS(ParserSym.DIV, e5, e6,e1); 
                                                                                int t= tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e5.esLiteral){
                                                                                op1 = new OperandoC3A(String.valueOf(e5.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                variable v1 = tv.get(e5.r);
                                                                                op1 = new OperandoC3A(v1.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e6.esLiteral){
                                                                                op2 = new OperandoC3A(String.valueOf(e6.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                variable v2 = tv.get(e6.r);
                                                                                op2 = new OperandoC3A(v2.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                OperandoC3A desti = new OperandoC3A(e1,TiposOperandoC3A.variable);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.DIV,op1,op2,desti));
                                                                                //ME FALTA VER QUE HACER CON SENTS.r SI ES NECESARIO HABRA QUE DARLE VALOR
                                                                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENTS ::= ID IGUAL ELp MOD ELp PNTCM 
            {
              SymbolSENTS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolELp e5 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolELp e6 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolSENTS(ParserSym.MOD, e5, e6,e1);
                                                                                int t= tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e5.esLiteral){
                                                                                op1 = new OperandoC3A(String.valueOf(e5.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                variable v1 = tv.get(e5.r);
                                                                                op1 = new OperandoC3A(v1.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e6.esLiteral){
                                                                                op2 = new OperandoC3A(String.valueOf(e6.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                variable v2 = tv.get(e6.r);
                                                                                op2 = new OperandoC3A(v2.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                OperandoC3A desti = new OperandoC3A(e1,TiposOperandoC3A.variable);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.MOD,op1,op2,desti));
                                                                                //ME FALTA VER QUE HACER CON SENTS.r SI ES NECESARIO HABRA QUE DARLE VALOR
                                                                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SENTS ::= ID IGUAL ELp SUB ELp PNTCM 
            {
              SymbolSENTS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolELp e5 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolELp e6 = (SymbolELp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolSENTS(ParserSym.SUB, e5, e6,e1); 
                                                                                int t= tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                OperandoC3A op1;
                                                                                OperandoC3A op2;
                                                                                if(e5.esLiteral){
                                                                                op1 = new OperandoC3A(String.valueOf(e5.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                variable v1 = tv.get(e5.r);
                                                                                op1 = new OperandoC3A(v1.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                if(e6.esLiteral){
                                                                                op2 = new OperandoC3A(String.valueOf(e6.r),TiposOperandoC3A.enteroLit);
                                                                                }else{
                                                                                variable v2 = tv.get(e6.r);
                                                                                op2 = new OperandoC3A(v2.idVariable,TiposOperandoC3A.variable);
                                                                                }
                                                                                OperandoC3A desti = new OperandoC3A(e1,TiposOperandoC3A.variable);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.SUB,op1,op2,desti));
                                                                                //ME FALTA VER QUE HACER CON SENTS.r SI ES NECESARIO HABRA QUE DARLE VALOR
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ELp ::= numero 
            {
              SymbolELp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                                                                RESULT = new SymbolELp(Integer.parseInt(v), true);
                                                                                //tengo que revisar como lo hacemos con los literales
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ELp ::= ENTER ID IGUAL numero PNTCM 
            {
              SymbolELp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubInt);
                                                                                TS.afegir(e1,d);                                                                                   
                                                                                int t= tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                 //TiposInstruccionC3A instruccion, OperandoC3A param1, OperandoC3A param2, OperandoC3A destino
                                                                                RESULT = new SymbolELp(t);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.ASSIG,null,new OperandoC3A(v,TiposOperandoC3A.enteroLit),new OperandoC3A(e1,TiposOperandoC3A.variable)));
                                                                                
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ELp ::= ENTER ID IGUAL ID PNTCM 
            {
              SymbolELp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubInt);
                                                                                TS.afegir(e1,d);
                                                                                descripcion d2 = TS.consultarD(e2);
                                                                                if(d2 == null){
                                                                                System.out.println("ERROR: La variable "+e2+" no ha sido declarada previamente");
                                                                                }else if(d2.tipoS != tipoSub.tipoSubInt){
                                                                                System.out.println("ERROR NO COINCIDEN LOS TIPOS");
                                                                                }
                                                                                int t= tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                 //TiposInstruccionC3A instruccion, OperandoC3A param1, OperandoC3A param2, OperandoC3A destino
                                                                                RESULT = new SymbolELp(t);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.ASSIG,null,new OperandoC3A(e2,TiposOperandoC3A.variable),new OperandoC3A(e1,TiposOperandoC3A.variable)));
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ELp ::= ENTER ID PNTCM 
            {
              SymbolELp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubInt);
                                                                                TS.afegir(e1,d);
                                                                                tv.addVariable(new variable(e1,tipoSub.tipoSubInt, tp.getNP()));
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ELp ::= ID 
            {
              SymbolELp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                                                                int id = tv.getIdVariable(e1);
                                                                                if(id == -1){
                                                                                System.out.println("ERROR: La variable "+e1+" no ha sido declarada previamente");
                                                                                RESULT = new SymbolELp(e1);
                                                                                }else{
                                                                                RESULT = new SymbolELp(e1);
                                                                                }
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ELp ::= CONST ID IGUAL VBOOL PNTCM 
            {
              SymbolELp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EB ::= BOOL ID IGUAL VBOOL PNTCM 
            {
              SymbolEB RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubBool);
                                                                                TS.afegir(e1,d);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EB",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EB ::= BOOL ID PNTCM 
            {
              SymbolEB RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubBool);
                                                                                TS.afegir(e1,d);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EB",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EB ::= ID IGUAL VBOOL PNTCM 
            {
              SymbolEB RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                                descripcion d1 = TS.consultarD(e1);
                                                                                if(d1 == null){
                                                                                System.out.println("ERROR: La variable "+e1+" no ha sido declarada previamente");
                                                                                }else{
                                                                                if(d1.tipoS!=tipoSub.tipoSubBool){
                                                                                System.out.println("ERROR: la variable debe de ser booleana");
                                                                                } }
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EB",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EB ::= ID IGUAL EL PNTCM 
            {
              SymbolEB RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolEL e2 = (SymbolEL)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                                descripcion d1 = TS.consultarD(e1);
                                                                                if(d1 == null){
                                                                                System.out.println("ERROR: La variable "+e1+" no ha sido declarada previamente");
                                                                                }else{
                                                                                if(d1.tipoS!=tipoSub.tipoSubBool){
                                                                                System.out.println("ERROR: la variable debe de ser booleana");
                                                                                } }
                                                                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EB",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EB ::= BOOL ID IGUAL EL PNTCM 
            {
              SymbolEB RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolEL e2 = (SymbolEL)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                                descripcion d = new descripcion(tipoDescripcion.Variable, tipoSub.tipoSubBool);
                                                                                TS.afegir(e1,d);
                                                                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EB",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EB ::= ID IGUAL numero PNTCM 
            {
              SymbolEB RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                                descripcion d1 = TS.consultarD(e1);
                                                                                if(d1 == null){
                                                                                System.out.println("ERROR: La variable "+e1+" no ha sido declarada previamente");
                                                                                }else if(d1.tipoS!=tipoSub.tipoSubInt){
                                                                                System.out.println("ERROR: la variable debe de ser un ENTERO");
                                                                                }else{
                                                                                int id = tv.getIdVariable(e1);
                                                                                variable v1 = tv.get(id);
                                                                                OperandoC3A op2 = new OperandoC3A(v,TiposOperandoC3A.enteroLit);
                                                                                OperandoC3A desti = new OperandoC3A(v1.idVariable,TiposOperandoC3A.variable);
                                                                                c3a.generaC3A(new InstrCodi3A(TiposInstruccionC3A.ASSIG,null,op2,desti));
                                                                                }
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EB",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EB ::= ID IGUAL ID PNTCM 
            {
              SymbolEB RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 descripcion d1 = TS.consultarD(e1);
                                                                                descripcion d2 = TS.consultarD(e2);
                                                                                 if(d1 == null){
                                                                                System.out.println("ERROR: La variable "+e1+" no ha sido declarada previamente");
                                                                                }else if(d2 == null){
                                                                                System.out.println("ERROR: La variable "+e1+" no ha sido declarada previamente");
                                                                                }else if(d1.tipoS != d2.tipoS){
                                                                                System.out.println("ERROR NO COINCIDEN LOS TIPOS");
                                                                                }
                                                                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EB",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // RetInstr ::= RETORNA ID PNTCM 
            {
              SymbolRetInstr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 descripcion d1 = TS.consultarD(e1);
                                                                                if(d1 == null){
                                                                                System.out.println("ERROR: La variable "+e1+" no ha sido declarada previamente");
                                                                                RESULT = new SymbolRetInstr();
                                                                                }else{
                                                                                if(d1.tipoS == tipoSub.tipoSubBool){
                                                                                RESULT = new SymbolRetInstr(true);
                                                                                }else{
                                                                                RESULT = new SymbolRetInstr(false);
                                                                                }
                                                                                }
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RetInstr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // RetInstr ::= RETORNA numero PNTCM 
            {
              SymbolRetInstr RESULT =null;
		 RESULT = new SymbolRetInstr(false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RetInstr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // RetInstr ::= RETORNA VBOOL PNTCM 
            {
              SymbolRetInstr RESULT =null;
		 RESULT = new SymbolRetInstr(false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RetInstr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
